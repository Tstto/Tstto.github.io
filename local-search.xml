<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络原理（四）</title>
    <link href="/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="一、网络层服务"><a href="#一、网络层服务" class="headerlink" title="一、网络层服务"></a>一、网络层服务</h2><p>网络层的主要作用是将（承载传输层报文段的）网络层数据报从<strong>源主机</strong>送达<strong>目的主机</strong></p><p>主要功能包括：</p><ul><li>转发：分组从输入接口转移到输出接口</li><li>路由选择：决定分组经过的路由或路径</li></ul><p><img src="/pic/jiwang/29.png"></p><h2 id="二、数据报网络与虚电路网络"><a href="#二、数据报网络与虚电路网络" class="headerlink" title="二、数据报网络与虚电路网络"></a>二、数据报网络与虚电路网络</h2><p>1.数据报网络 </p><p>按照目的主机地址进行路由选择的网络称为数据报网络</p><p>2.虚电路网络</p><p>虚电路网络在网络层提供面向连接的分组交换服务</p><h2 id="三、网络互连与网络互连设备"><a href="#三、网络互连与网络互连设备" class="headerlink" title="三、网络互连与网络互连设备"></a>三、网络互连与网络互连设备</h2><p>1.异构网络主要是指两个网络的<strong>通信技术</strong>和<strong>运行协议</strong>的不同</p><p>实现异构网络互连的基本策略：</p><ul><li>协议转换</li><li>构建虚拟互联网络</li></ul><p>2.路由器</p><p>在网络层实现网络互连的设备是<strong>路由器</strong>。集线器和中继器都是物理层设备。交换机和网桥是数据链路层设备，<strong>交换机</strong>就是多端口的网桥，是目前应用最广泛的数据链路层设备</p><p><img src="/pic/jiwang/30.png"></p><h2 id="四、网络层拥塞控制"><a href="#四、网络层拥塞控制" class="headerlink" title="四、网络层拥塞控制"></a>四、网络层拥塞控制</h2><p><img src="/pic/jiwang/31.png"></p><h2 id="五、Internet网络层"><a href="#五、Internet网络层" class="headerlink" title="五、Internet网络层"></a>五、Internet网络层</h2><p>1.IPv4协议</p><p><img src="/pic/jiwang/32.png" alt="IP数据报格式"></p><p>2.IPv4编址</p><p>IP 地址划分为两部分：前缀（网络号）和后缀（主机号）。定长前缀为分类地址， 无类地址中网络地址前缀长度可变</p><p><img src="/pic/jiwang/33.png"></p><p><strong>子网划分</strong>：子网化就是指将一个较大的子网划分为多个较小子网的过程。超网化是指将具有较长前缀的相对较小的子网合并为一个具有稍短前缀的相对较大的子网。 超网化是子网化的逆过程。子网掩码用来定义一个子网的网络前缀长度，是一个 32 位数，取值规则是：对应网络前缀，全部为 1，其余全部为 0</p><p><strong>路由聚合</strong>：路由聚合是为了提高路由效率，减少路由表项数，尽可能将能够聚合在一起的子网聚合成一个大的子网。“下一跳地址”和“接口”相同，才能聚合</p><p>3.动态主机配置协议 DHCP </p><p>工作过程：</p><ul><li>DHCP 服务器发现</li><li>DHCP 服务器提供</li><li>DHCP 请求 </li><li>DHCP  确认</li></ul><p>4.网络地址转换</p><p>NAT 工作原理：对于从内网出去，进入公共互联网的 IP 数据报，将其源 IP 地址替换为 NAT 服务器拥有的合法的公共 IP 地址， 同时替换源端口号，并将替换关系记录到 NAT 转换表中；对于从公共互联网返回的 IP 数据报，依据其目的 IP 地址与目的端口号检索 NAT 转换 表，并利用检索到的内部私有 IP 地址与对应的端口号替换目的 IP 地址和目的端口号，然后将 IP 数据报转发到内部网络</p><p>5.ICMP（互联网控制报文协议）</p><p>ICMP 包括 3 个字段：类型、代码和校验和</p><p>ICMP 差错报告报文有 5 种： 终点不可达、 源点抑制、 时间超时、 参数问题、 路由重定向。ICMP 询问报文： 回声（echo） 请求/应答（Ping命令）、 时间戳请求/应答</p><p>6.IPv6</p><ul><li>解决IPv4地址耗尽的问题</li><li>IPv6报文首部长度固定40字节</li><li>IPv6地址长度128位</li><li>IPv4到IPv6的迁移<ul><li>双协议栈</li><li>隧道</li></ul></li></ul><h2 id="六、路由算法与路由协议"><a href="#六、路由算法与路由协议" class="headerlink" title="六、路由算法与路由协议"></a>六、路由算法与路由协议</h2><p><img src="/pic/jiwang/34.png"></p><p>层次化路由选择：实现大规模网络路由选择最有效的、最可行的解决方案。每个自治系统都存在网关路由器。层次化路由选择将大规模互联网的路由划分为两层：<strong>自治系统内路由选择</strong>和<strong>自治系统间路由选择</strong></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（三）</title>
    <link href="/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h1><h2 id="一、传输层的基本服务"><a href="#一、传输层的基本服务" class="headerlink" title="一、传输层的基本服务"></a>一、传输层的基本服务</h2><p>1.传输层功能</p><p>传输层的<strong>核心任务</strong>是：是为应用进程之间提供端到端的逻辑通信服务</p><p>功能：传输层寻址；对应用层报文进行分段和重组；对报文进行差错检测；实现进程间端到端可靠数据传输控制；面向应用层实现复用与分解；实现端到端的流量控制；拥塞控制等</p><p>2.传输层寻址与端口</p><p>用统一的寻址方法对应用进程进行标识–<strong>端口号</strong></p><p>在全网范围内利用“<strong>IP地址+端口号</strong>”唯一标识一个通信端点（应用程序）</p><p>传输层端口号为16位整数</p><p><img src="/pic/jiwang/22.png"></p><p>3.无连接服务与面向连接服务</p><p>无连接服务是指数据传输之前无需与对端进行任何信息交换（即“握手”），直接构造传输层报文段并向接收端发送–<strong>UDP</strong></p><p>面向连接服务是指在数据传输之前，需要双方交换一些控制信息，<strong>建立逻辑连接</strong>，然后再传输数据，数据传输结束后还需要再拆除连接–<strong>TCP</strong></p><h2 id="二、传输层的复用与分解"><a href="#二、传输层的复用与分解" class="headerlink" title="二、传输层的复用与分解"></a>二、传输层的复用与分解</h2><p><img src="/pic/jiwang/23.png"></p><h2 id="三、停-等协议与滑动窗口协议"><a href="#三、停-等协议与滑动窗口协议" class="headerlink" title="三、停-等协议与滑动窗口协议"></a>三、停-等协议与滑动窗口协议</h2><p>1.可靠数据传输基本原理</p><p>不可靠传输信道在数据传输中可能发生：（1）比特差错（2）乱序（3）数据丢失</p><p>实现可靠数据传输的措施主要包括以下几种：</p><ul><li>差错检测：利用差错编码实现数据包传输过程中的比特差错检测（甚至纠正）</li><li>确认：接收方向发送方反馈接收状态</li><li>重传：发送方重新发送接收方没有正确接收的数据</li><li>序号：确保数据按序提交</li><li>计时器：解决数据丢失问题</li></ul><p>2.停-等协议</p><p>停-等协议的基本工作过程是：</p><p> 1、发送方发送经过差错编码和编号的报文段，等待接收方的确认（<strong>发送并等待确认</strong>）</p><p>2、接收方如果正确接收报文段，即差错检测无误且序号正确，则接收报文段，并 </p><p>向发送方发送 ACK，否则丢弃报文段，并向发送方发送 NAK（<strong>接收并确认/否认</strong>）</p><p>3、发送方如果收到 ACK，则继续发送后续报文段，否则重发刚刚发送的报文段（<strong>继续发送/重发</strong>）</p><p>3.滑动窗口协议</p><p>停止-等待机制<strong>降低了信道利用率</strong>，解决方法：流水线协议或管道协议–允许发送方在没有收到确认前连续发送多个分组，典型的流水线协议：<strong>滑动窗口协议</strong></p><p>流水线协议的改进：</p><ul><li>增加分组序号范围</li><li>发送方和（或）接收方必须缓存多个分组</li></ul><p>两种最具代表性的滑动窗口协议是：<strong>GBN 协议</strong>（发送窗口≥1，接收窗口=1）和 <strong>SR 协议</strong> （发送窗口和接收窗口都大于 1）</p><h2 id="四、用户数据报协议（UDP）"><a href="#四、用户数据报协议（UDP）" class="headerlink" title="四、用户数据报协议（UDP）"></a>四、用户数据报协议（UDP）</h2><p>用户数据报协议 UDP 是 Internet 传输层协议，提供无连接、不可靠、数据报尽力传输服务。UDP 与 TCP 相比，优点有：（1）应用进程更容易控制发送什么数据以及何时发送（2）无需建立连接（3）无连接状态（4）首部开销小</p><p><img src="/pic/jiwang/24.png" alt="UDP数据报结构"></p><h2 id="五、传输控制协议（TCP）"><a href="#五、传输控制协议（TCP）" class="headerlink" title="五、传输控制协议（TCP）"></a>五、传输控制协议（TCP）</h2><p>1.TCP报文段结构</p><p><img src="/pic/jiwang/25.png"></p><p>2.TCP连接管理</p><p>连接建立–三次握手</p><ul><li>SYN连接请求（同步）</li><li>SYNACK确认</li><li>ACK确认</li></ul><p><img src="/pic/jiwang/27.png" alt="建立连接--三次握手"></p><p><img src="/pic/jiwang/28.png" alt="断开连接--四次挥手"></p><p><img src="/pic/jiwang/26.png" alt="总结"></p><p>3.TCP可靠数据传输</p><p>TCP 的可靠数据传输实现机制包括差错编码、确认、序号、重传、计时器等</p><p>4.TCP流量控制</p><p>流量控制（flow control）的目的是协调协议发送方与接收方的数据发送与接收速度，避免因发送方发送数据太快，超出接收方的数据接收和处理能力，导致接收方被数据“淹没”</p><p>5.TCP拥塞控制</p><p>拥塞控制（congestion control）就是通过合理调度、规范、调整向网络中发送数据的主机数量、发送速率或数据量，以避免拥塞或尽快消除己发生的拥塞</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本语法</title>
    <link href="/2021/10/24/Git%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/10/24/Git%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="/pic/Git/1.png" alt="脑图"></p><h1 id="一、版本控制"><a href="#一、版本控制" class="headerlink" title="一、版本控制"></a>一、版本控制</h1><h3 id="1-什么是版本控制？"><a href="#1-什么是版本控制？" class="headerlink" title="1.什么是版本控制？"></a>1.什么是版本控制？</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术，简单说就是用于管理多人协同开发项目的技术</p><h3 id="2-常见的版本控制工具"><a href="#2-常见的版本控制工具" class="headerlink" title="2.常见的版本控制工具"></a>2.常见的版本控制工具</h3><p>Git、SVM、CVS、VSS、TFS…</p><h3 id="3-版本控制分类"><a href="#3-版本控制分类" class="headerlink" title="3.版本控制分类"></a>3.版本控制分类</h3><ul><li>本地版本控制</li></ul><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS</p><ul><li>集中版本控制（SVM）</li></ul><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作，如SVN、CVS、VSS</p><ul><li>分布式版本控制（Git）</li></ul><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里</p><h1 id="二、常用的Linux命令"><a href="#二、常用的Linux命令" class="headerlink" title="二、常用的Linux命令"></a>二、常用的Linux命令</h1><ul><li>cd：改变目录<ul><li>cd..：回退到上一个目录，直接cd进入默认目录</li></ul></li><li>pwd：显示当前所在的目录路径</li><li>ls（ll）：都是列出当前目录中的所有文件，只不过ll（两个ll）列出的内容更详细</li><li>touch : 新建一个文件如 touch index.js，就会在当前目录下新建一个index.js文件</li><li>mkdir:  新建一个目录，就是新建一个文件夹</li><li>rm:  删除一个文件，rm index.js 就会把index.js文件删除<ul><li>rm -r :  删除一个文件夹，rm -r src 删除src目录</li><li>rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！（f迭代，/根目录）</li></ul></li><li>mv：移动文件, mv index.html src，index.html 是我们要移动的文件,，src 是目标文件夹， 这样写必须保证文件和目标文件夹在同一目录下</li><li>reset：重新初始化终端/清屏</li><li>clear 清屏</li><li>history 查看命令历史</li><li>help 帮助</li><li>exit 退出</li><li>“#”表示注释</li></ul><h1 id="三、Git基本概念"><a href="#三、Git基本概念" class="headerlink" title="三、Git基本概念"></a>三、Git基本概念</h1><p><img src="/pic/Git/2.jpg"></p><ul><li><p>工作区</p><ul><li>本地项目存放文件的位置，即workspace</li></ul></li><li><p>暂存区(Index/Stage)</p><ul><li>暂时存放文件的地方，通过<strong>add</strong>命令将工作区的文件加到缓冲区</li></ul></li><li><p>本地仓库(Repository)</p><ul><li>通常情况下，我们使用<strong>commit</strong>命令可以将暂存区的文件添加到本地仓库</li><li>通常而言，HEAD指针指向的是master分支</li></ul></li><li><p>远程仓库(Remote)</p><ul><li>GitHub托管项目时，它就是一个远程仓库</li><li>通常我们使用clone命令将远程仓库代码拷贝下来，本地代码更新后，通过<strong>push</strong>推送到远程仓库</li></ul></li></ul><p><img src="/pic/Git/3.jpg" alt="基本工作流程"></p><h1 id="四、Git进阶"><a href="#四、Git进阶" class="headerlink" title="四、Git进阶"></a>四、Git进阶</h1><h3 id="1-Git使用前配置"><a href="#1-Git使用前配置" class="headerlink" title="1.Git使用前配置"></a>1.Git使用前配置</h3><p>在使用git前，需要告诉git你是谁，在向git仓库中提交时需要用到。</p><ol><li>配置提交人姓名:<code>git config --global user.name 提交人姓名</code></li><li>配置提交人邮箱:<code>git config --global user.email 提交人邮箱</code></li><li>查看git配置信息:<code>git config --list</code></li></ol><blockquote><p><strong>注意</strong></p></blockquote><ul><li>如果要对配置信息进行修改，重复上述命令即可</li><li>配置只需要执行一次。</li></ul><h3 id="2-提交步骤"><a href="#2-提交步骤" class="headerlink" title="2.提交步骤"></a>2.提交步骤</h3><ul><li><p><code>git init</code>初始化git仓库</p></li><li><p><code>git status</code>查看文件状态</p></li><li><p><code>git add 文件列表</code>追踪文件</p></li><li><p><code>git commit -m 提交信息</code>向本地仓库中提交代码</p></li><li><p><code>git log</code>查看提交记录</p></li><li><p><code>git push https://github.com/ovfan/git-demo.git master</code>本地仓库推送到GitHub远程仓库</p></li><li><p><code>git remote add origin https://github.com/ovfan/git-demo.git</code> 为远端仓库地址添加别名</p><ul><li>添加完别名后，下次推送使用<code>git push origin master</code></li></ul></li><li><p><code>git push -u 远程仓库地址别名 分支名称</code> -u 记住推送地址及分支，下次推送只需要输入<code>git push</code>即可</p></li></ul><h3 id="3-分支命令"><a href="#3-分支命令" class="headerlink" title="3.分支命令"></a>3.分支命令</h3><ul><li><code>git branch</code> 查看本地分支</li><li><code>git branch -r</code>查看远程分支</li><li><code>git branch 分支名称</code>创建分支<ul><li><code>git checkout -b 分支名称</code>创建并切换到新建分支</li></ul></li><li><code>git checkout 分支名称</code>切换分支</li><li><code>git merge 来源分支</code>合并分支</li><li><code>git branch -d 分支名称</code>删除分支<ul><li>分支被合并后才允许删除</li><li><code>git branch -D</code>强制删除</li></ul></li><li><code>git branch -m &lt;oldbranch-name&gt; &lt;newbranch-name&gt;</code>重命名分支</li><li><code>git add .</code>全部上传到缓存区<ul><li><code>git add 指定文件</code>指定文件上传到缓存区</li></ul></li></ul><h1 id="五、小灶"><a href="#五、小灶" class="headerlink" title="五、小灶"></a>五、小灶</h1><h3 id="1-拉取操作"><a href="#1-拉取操作" class="headerlink" title="1.拉取操作"></a>1.拉取操作</h3><ul><li>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></li><li>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></li></ul><h3 id="2-ssh免登录"><a href="#2-ssh免登录" class="headerlink" title="2.ssh免登录"></a>2.ssh免登录</h3><ul><li>生成密钥：<code>ssh-keygen</code></li><li>密钥存储目录:<code>C:\Users\shinelon\.ssh</code></li><li>公钥名称：<code>id_rsa.pub</code></li><li>私钥名称：<code>id_rsa</code></li></ul><h3 id="3-Git忽略清单"><a href="#3-Git忽略清单" class="headerlink" title="3.Git忽略清单"></a>3.Git忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件，git忽略清单文件名称：<strong>「.gitignore」</strong></p><p>参考</p><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/koameBEQILNz1ViT_oB_cQ">前端fan</a></li><li><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ">狂神聊Git</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（二）</title>
    <link href="/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-网络应用"><a href="#第二章-网络应用" class="headerlink" title="第二章 网络应用"></a>第二章 网络应用</h1><h2 id="一、计算机网络应用体系结构"><a href="#一、计算机网络应用体系结构" class="headerlink" title="一、计算机网络应用体系结构"></a>一、计算机网络应用体系结构</h2><p><img src="/pic/jiwang/9.png"></p><h2 id="二、网络应用通信基本原理"><a href="#二、网络应用通信基本原理" class="headerlink" title="二、网络应用通信基本原理"></a>二、网络应用通信基本原理</h2><p>网络应用的本质是运行在不同主机上的应用进程之间的通信，无论哪种类型的网络应用，基本通信方式都是C/S通信</p><p><img src="/pic/jiwang/10.png"></p><h2 id="三、域名系统（DNS）"><a href="#三、域名系统（DNS）" class="headerlink" title="三、域名系统（DNS）"></a>三、域名系统（DNS）</h2><p>DNS 是一个重要的基础应用，因为任何一个需要使用域名进行通信的网络应用，在应用通信之前首先需要请求 DNS 应用，将域名映射为 IP 地址。实现将域名映射为 IP 地址的过程，称为<strong>域名解析</strong></p><ol><li> 层次树状结构的命名方法</li></ol><ul><li>国家顶级域名 nTLD</li><li>通用顶级域名 gTLD</li><li>基础结构域名</li></ul><ol start="2"><li> 域名服务器</li></ol><p>为了实现域名解析，需要建立分布式数据库，存储网络中域名与IP地址的映射关系数据</p><ol start="3"><li> 域名服务器分类：</li></ol><ul><li>根域名服务器</li></ul><ul><li>顶级域名服务器</li><li>权威域名服务器</li><li>中间域名服务器</li></ul><ol start="4"><li>  域名解析过程</li></ol><p>递归解析：依次查询</p><p><img src="/pic/jiwang/11.png" alt="递归查询"></p><p>迭代解析：直接响应结果，减轻根域名服务器的压力</p><p><img src="/pic/jiwang/12.png" alt="迭代查询"></p><h2 id="四、万维网应用"><a href="#四、万维网应用" class="headerlink" title="四、万维网应用"></a>四、万维网应用</h2><ol><li> 万维网结构</li></ol><p>Web 应用主要包括 Web 服务器、浏览器与超文本传输协议（HTTP）等部分，浏览器就是 Web 应用的客户端软件，请求首先建立TCP连接</p><p>HTML 基本 Web 页也是通过 URL 地址引用页面中的其他对象，每个 URL 地址主要由<strong>两部分</strong>组成：存放对象的服务器主机域名和对象的路径名</p><ol start="2"><li> HTTP</li></ol><p><img src="/pic/jiwang/13.png"></p><ol start="3"><li> Cookie</li></ol><p>Cookie 是由服务器端生成，是实现服务器对客户状态的跟踪的典型技术</p><p><img src="/pic/jiwang/14.png" alt="Cookie的工作原理"></p><h2 id="五、Internet电子邮件"><a href="#五、Internet电子邮件" class="headerlink" title="五、Internet电子邮件"></a>五、Internet电子邮件</h2><p><img src="/pic/jiwang/15.png"></p><p><img src="/pic/jiwang/16.png"></p><h2 id="六、FTP"><a href="#六、FTP" class="headerlink" title="六、FTP"></a>六、FTP</h2><p>文件传送协议（FTP）是在互联网的两个主机间实现文件互传的应用层协议，C/S模式，采用<strong>控制连接</strong>（21端口）传输控制命令，<strong>数据连接</strong>（20端口）传输文件内容</p><p><img src="/pic/jiwang/17.png" alt="FTP应用结构"></p><h2 id="七、P2P应用"><a href="#七、P2P应用" class="headerlink" title="七、P2P应用"></a>七、P2P应用</h2><p>P2P应用的优势：充分聚集利用了端系统（对等方主机）的计算能力以及网络传输带宽，对服务器的依赖很小</p><p><img src="/pic/jiwang/18.png" alt="文件分发问题"></p><h2 id="八、Socket编程基础"><a href="#八、Socket编程基础" class="headerlink" title="八、Socket编程基础"></a>八、Socket编程基础</h2><p>利用 Socket 编程技术可以开发客户/服务器网络应用程序，网络应用进程通信时需要通过<strong>API接口</strong>请求底层协议的服务，可以创建3种类型的Socket：数据报类型套接字SOCK_DGRAM（面向UDP）、流式套接字 SOCK_STREAM（面向 TCP）和原始套接字 SOCK_RAM</p><p><img src="/pic/jiwang/19.png"></p><p><img src="/pic/jiwang/20.png" alt="基于TCP的Socket编程"></p><p><img src="/pic/jiwang/21.png" alt="基于UDP的Socket编程"></p><h5 id="重难点回顾"><a href="#重难点回顾" class="headerlink" title="重难点回顾"></a>重难点回顾</h5><ul><li>客户/服务器、P2P（Pear to Pear）两种网络应用体系结构及各自的特点</li><li>DNS的概念和工作原理</li><li>万维网应用结构和HTTP协议</li><li>电子邮件系统结构和协议</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（一）</title>
    <link href="/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h1><h2 id="一、计算机网络基本概念"><a href="#一、计算机网络基本概念" class="headerlink" title="一、计算机网络基本概念"></a>一、计算机网络基本概念</h2><ol><li>计算机网络是互连的、自治的计算机的集合</li></ol><p>“互连”：指利用通信链路连接相互独立的计算机系统</p><p>“自治”：指互连的计算机系统彼此独立，不存在主从或者控制与被控制的关系</p><ol start="2"><li>协议是网络通信实体之间在数据交换过程中需要遵循的规则或约定，是计算机网络有序运行的重要保证</li></ol><p><strong>协议三要素：语义、语法、时序</strong></p><ul><li>语法，语法定义实体之间交换信息的格式与结构</li><li>语义，语义就是定义实体之间交换的信息中需要发送控制信息</li><li>时序，时序也称为同步，定义实体之间交换信息的顺序以及如何匹配或适应彼此的速度</li></ul><ol start="3"><li>计算机网络的分类</li></ol><p><strong>按覆盖范围分类：</strong></p><p>个域网（PAN）、局域网（LAN）、城域网（MAN）、广域网（WAN）</p><p><strong>按拓扑结构分类：</strong></p><p><img src="/pic/jiwang/1.png" alt="常见的网络拓扑结构"></p><p><strong>按交换方式分类</strong></p><p>电路交换网络、报文交换网络、分组交换网络</p><h2 id="二、计算机网络结构"><a href="#二、计算机网络结构" class="headerlink" title="二、计算机网络结构"></a>二、计算机网络结构</h2><p>大规模现代计算机网络的结构包括<strong>网络边缘、接入网络与网络核心</strong>3部分</p><h2 id="三、数据交换技术"><a href="#三、数据交换技术" class="headerlink" title="三、数据交换技术"></a>三、数据交换技术</h2><p><img src="/pic/jiwang/2.png" alt="交换设备与交换网络的意义"></p><ol><li>电路交换</li></ol><p>电路交换是最早出现的一种交换方式，电话网络则是最早、最大的电路交换网络</p><p>利用电路交换进行通信包括<strong>建立电路、传输数据和拆除电路</strong>3个阶段</p><p><img src="/pic/jiwang/3.png" alt="电路交换"></p><p>优点：<strong>实时性高</strong>，时延较小</p><p>缺点：对于突发性数据传输，<strong>信道利用率低</strong>，且传输速率单一</p><ol start="2"><li>报文交换</li></ol><p><strong>存储-转发</strong>交换方式，适用于电报通信</p><p><img src="/pic/jiwang/4.png" alt="分组交换"></p><p>优点：<strong>不需要建立连接</strong></p><p>缺点：交换结点需要缓冲存储，报文需要<strong>排队</strong>，增加了延时</p><ol start="3"><li>分组交换</li></ol><p>将一个完整报文拆分成若干个<strong>分组</strong>，分组传输过程也通常采用<strong>存储-转发</strong>交换方式</p><p><img src="/pic/jiwang/5.png" alt="分组交换"></p><p>优点：交换设备<strong>存储容量要求低</strong>，交换速度快，可靠传输效率高，更加公平 </p><p>缺点：有效传输效率降低(<strong>分组长度与延迟时间</strong>)</p><h2 id="四、计算机网络性能"><a href="#四、计算机网络性能" class="headerlink" title="四、计算机网络性能"></a>四、计算机网络性能</h2><ol><li> 速率与带宽</li></ol><p><strong>速率</strong>是指网络单位时间内传送的数据量，用以描述网络传输数据的快慢，也称为数据传输速率或数据速率，速率的基本单位是 bit/s（位每秒，简写为bps）带宽</p><p>在计算机网络中，有时也会用“<strong>带宽</strong>”这一术语描述速率</p><p>带宽原本是指信号具有的频带宽度，即信号成分的最高频率与最低频率之差，单位为 Hz（赫兹）</p><ol start="2"><li> 时延</li></ol><p><strong>时延</strong>是指数据从网络中的一个结点（主机或交换设备等）到达另一结点所需要的时间</p><ol start="3"><li> 时延带宽积</li></ol><p>一段物理链路的传播时延与链路带宽的乘积，称为<strong>时延带宽积</strong></p><ol start="4"><li> 丢包率</li></ol><p><strong>丢包率</strong>常被用于评价和衡量网络性能的指标，在很大程度上可以反映网络的拥塞程度</p><p>丢包率=丢失分组总数/发送分组总数</p><ol start="5"><li> 吞吐量</li></ol><p><strong>吞吐量</strong>表示在单位时间内源主机通过网络向目的主机实际送达的数据量，吞吐量经常用于度量网络的实际数据传送（通过）能力。</p><h2 id="五、计算机网络体系结构"><a href="#五、计算机网络体系结构" class="headerlink" title="五、计算机网络体系结构"></a>五、计算机网络体系结构</h2><ol><li> OSI（开放系统互联）参考模型</li></ol><p><img src="/pic/jiwang/6.png" alt="OSI参考模型数据封装与传输过程"></p><ol start="2"><li> TCP/IP参考模型、五层参考模型</li></ol><p><img src="/pic/jiwang/7.png" alt="各模型之间的比较"></p><ol start="3"><li> 各层次的功能</li></ol><p>   <img src="/pic/jiwang/8.png" alt="层次功能"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2021/10/23/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/10/23/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">#  一级标题<br><br>##  二级标题<br><br>###  三级标题<br><br>####  四级标题<br><br>#####  五级标题<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>记得#后面加空格，一级到五级，字体从大到小</li></ul><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**这是加粗的文字**</span><br><br><span class="hljs-strong">*这是倾斜的文字*</span><br><br><span class="hljs-strong">***这是斜体加粗的文字**</span>*<br><br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><em><strong>这是斜体加粗的文字</strong></em></p><p><del>这是加删除线的文字</del></p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h1><p>使用 <code>&gt;</code> 表示，可以有多个 <code>&gt;</code>，表示层级更深</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><blockquote><p>这是引用的内容</p></blockquote><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h1><p>三个或者三个以上的 - 或者 * 都可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">***</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5. 超链接"></a>5. 超链接</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[超链接名]</span>(超链接地址 <span class="hljs-string">&quot;超链接title&quot;</span>)<br><br><span class="hljs-selector-tag">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br></code></pre></td></tr></table></figure><p><a href="http://baidu.com/">百度</a></p><h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dos">![图片alt](图片地址 &quot;图片<span class="hljs-built_in">title</span>&quot;)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片<span class="hljs-built_in">title</span>是图片的标题，当鼠标移到图片上时显示的内容<br><span class="hljs-built_in">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>图片和链接的写法类似，图片仅在超链接前多了一个 <code>!</code> </p><p><code>![姜文](/img/favorite.jpeg)</code></p><p><img src="/img/favorite.jpeg" alt="姜文"></p><h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h1><ul><li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5></li></ul><p>无序列表用 - + * 任何一种都可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + <span class="hljs-emphasis">* 跟内容之间都要有一个空格</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5></li></ul><p>数字加点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 列表内容<br><span class="hljs-number">2.</span> 列表内容<br><span class="hljs-number">3.</span> 列表内容<br><br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><ul><li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5></li></ul><p>上一级和下一级之间敲三个空格</p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容<ol><li> 三级有序列表内容</li><li> 三级有序列表内容</li></ol></li></ul></li><li><h5 id="高级列表"><a href="#高级列表" class="headerlink" title="高级列表"></a>高级列表</h5><p>有可勾选框的清单</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>[x] 1.早睡早起<br><span class="hljs-bullet">- </span>[ ] 2.打代码<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 1.早睡早起</li><li><input disabled="" type="checkbox"> 2.打代码</li></ul></li></ul><h1 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">表头|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span><br><span class="hljs-string">---</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">---:</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">第二行分割表头和内容。</span><br><span class="hljs-string">- 有一个就行，为了对齐，多加了几个</span><br><span class="hljs-string">文字默认居左</span><br><span class="hljs-string">-两边加：表示文字居中</span><br><span class="hljs-string">-右边加：表示文字居右</span><br><span class="hljs-string">注：原生的语法两边都要用 </span>|<span class="hljs-string"> 包起来。此处省略</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">姓名|<span class="hljs-string">技能</span>|<span class="hljs-string">排行</span><br><span class="hljs-string">--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:</span><br><span class="hljs-string">刘备</span>|<span class="hljs-string">哭</span>|<span class="hljs-string">大哥</span><br><span class="hljs-string">关羽</span>|<span class="hljs-string">打</span>|<span class="hljs-string">二哥</span><br><span class="hljs-string">张飞</span>|<span class="hljs-string">骂</span>|<span class="hljs-string">三弟</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="9-代码"><a href="#9-代码" class="headerlink" title="9. 代码"></a>9. 代码</h1><ul><li><h5 id="用反引号-来插入行内代码"><a href="#用反引号-来插入行内代码" class="headerlink" title="用反引号 ` 来插入行内代码"></a>用反引号 ` 来插入行内代码</h5><p><code>String name = &quot;Tstto&quot;</code></p></li><li><h5 id="三个连续的反引号-包裹多行代码"><a href="#三个连续的反引号-包裹多行代码" class="headerlink" title="三个连续的反引号 ``` 包裹多行代码"></a>三个连续的反引号 ``` 包裹多行代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  alert(<span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/2021/10/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ul><li><p>查看node版本</p><p>node -v</p></li><li><p>查看npm版本</p><p>npm -v</p></li></ul><h2 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h2><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><ul><li><p>查看cnpm版本</p><p>cnpm -v</p></li></ul><h2 id="安装hexo脚手架"><a href="#安装hexo脚手架" class="headerlink" title="安装hexo脚手架"></a>安装hexo脚手架</h2><p>cnpm install -g hexo-cli</p><ul><li><p>查看hexo版本</p><p>hexo -v</p></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://npm.taobao.org/mirrors">淘宝Git镜像下载</a></p><ul><li>Windows用户右击打开Git Bash Here进入命令行窗口</li></ul><ul><li><p>创建blog目录(任意盘选择)</p><p>mkdir  blog   //方便后续出现问题及时处理</p></li><li><p>进入blog目录，初始化博客</p><p>cd blog</p><p>hexo init</p></li><li><p>启动本地hexo服务</p><p>hexo s(serve)   //本地默认访问地址<a href="http://localhost:4000/">http://localhost:4000</a></p></li><li><p>创建博客文章</p><p>hexo n(new) xxx(文章title)   //保存目录…\blog\source_posts</p></li><li><p>清理更新</p><p>hexo c(clean)</p></li><li><p>生成</p><p>hexo g(generate) </p></li></ul><h1 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h1><p>(内心os：原先想在码云Gitee搭建仓库的，无奈Gitee Pages需实名认证过程繁琐，Github又有墙，博客有时加载速度真的是要了狗命…)</p><ul><li><p>注册创建账号，搭建仓库</p><p>GithubName.github.io(墙裂建议！！！一定要照抄不误的用你的用户名，否则后面可能出现一系列问题)</p></li><li><p>blog目录下安装git部署插件</p><p>cnpm install –save hexo-deployer-git</p></li></ul><h1 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h1><p>灰常重要哦！！！误删误大改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span><br>deploy:<br>  type: git<br> repo: https:<span class="hljs-comment">//github.com/YourGithubName/YourGithubName.github.io.git</span><br>  branch: master<br>(文件底部可见)<br></code></pre></td></tr></table></figure><ul><li><p>部署到Github仓库</p><p>hexo d(deploy)</p></li><li><p>访问hexo初始化博客</p><p><a href="https://githubname.github.io/">https://GithubName.github.io/</a>   //访问这个地址可以查看博客</p></li></ul><h1 id="下载你喜欢的hexo主题"><a href="#下载你喜欢的hexo主题" class="headerlink" title="下载你喜欢的hexo主题"></a>下载你喜欢的hexo主题</h1><p>git clone <a href="https://github.com/fluid-dev/hexo-theme-fluid.git">https://github.com/fluid-dev/hexo-theme-fluid.git</a>   //我自己用的是Fluid主题，更多热门主题可访问<a href="https://hexo.io/themes/">hexo官网</a>查看对应Readme.md文档</p><ul><li>修改hexo根目录下的 _config.yml 文件 </li></ul><p><code>theme: fluid</code></p><p>hexo c<br>hexo g<br>hexo d   //部署到远程Github仓库<br><a href="https://githubname.github.io/">https://GithubName.github.io/</a>   //查看博客</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><ul><li>配置指定语言</li></ul><p>_config.yml文件下修改主题指定语言</p><p><code>language: zh-CN</code></p><ul><li>手动创建[分类页]、[标签页]…</li></ul><p>hexo n page 创建页名称</p><ul><li>另外</li></ul><p>完成以上就能够构建一个基本结构，足够美观大气的博客。很多地方还都是官方的默认配置，比如背景图，交互…很难满足每个人的口味，未来很长，除了这一小部分的修修改改，学习的路上还有很多等你攻克的事，加油！(个性化设置基本都在_config.yml中，blog目录和主题Fluid目录下都有 当然如果你有能力自定义的话，也可以打造专属你自己的页面)</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
