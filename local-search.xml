<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript面向对象</title>
    <link href="/2021/11/14/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/11/14/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章：面向对象"><a href="#第二章：面向对象" class="headerlink" title="第二章：面向对象"></a>第二章：面向对象</h1><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><ul><li><p>```typescript<br>class 类名 {</p><pre><code>属性名: 类型;constructor(参数: 类型)&#123;    this.属性名 = 参数;&#125;方法名()&#123;    ....&#125;</code></pre><p>}</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br>- 示例：<br><br>  - ```typescript<br>    <span class="hljs-built_in">class</span> Person&#123;<br>        <span class="hljs-built_in">name</span>: <span class="hljs-built_in">string</span>;<br>        age: <span class="hljs-built_in">number</span>;<br><br>        constructor(<span class="hljs-built_in">name</span>: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span>)&#123;<br>            this.<span class="hljs-built_in">name</span> = <span class="hljs-built_in">name</span>;<br>            this.age = age;<br>        &#125;<br><br>        sayHello()&#123;<br>            console.<span class="hljs-built_in">log</span>(`大家好，我是$&#123;this.<span class="hljs-built_in">name</span>&#125;`);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用类：</p><ul><li><p>```typescript<br>const p = new Person(‘孙悟空’, 18);<br>p.sayHello();</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-comment">## 2、面向对象的特点</span><br><br>- 封装<br><br>  - 对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装<br><br>  - 默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置<br><br>  - 只读属性（readonly）：<br><br>    - 如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改<br><br>  - TS中属性具有三种修饰符：<br><br>    - public（默认值），可以在类、子类和对象中修改<br>    - protected ，可以在类、子类中修改<br>    - private ，可以在类中修改<br><br>  - 示例：<br><br>    - public<br><br>      - ```<span class="javascript">typescript</span><br><span class="javascript">        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;</span><br><span class="javascript">            public name: string; <span class="hljs-comment">// 写或什么都不写都是public</span></span><br><span class="javascript">            public age: number;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以在类中修改</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">super</span>(name, age);</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中可以修改</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);</span><br><span class="javascript">        p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 可以通过对象修改</span></span><br></code></pre></td></tr></table></figure><ul><li><p>protected</p><ul><li><p>```typescript<br>class Person{</p><pre><code>protected name: string;protected age: number;constructor(name: string, age: number)&#123;    this.name = name; // 可以修改    this.age = age;&#125;sayHello()&#123;    console.log(`大家好，我是$&#123;this.name&#125;`);&#125;</code></pre><p>}</p><p>class Employee extends Person{</p><pre><code>constructor(name: string, age: number)&#123;    super(name, age);    this.name = name; //子类中可以修改&#125;</code></pre><p>}</p><p>const p = new Person(‘孙悟空’, 18);<br>p.name = ‘猪八戒’;// 不能修改</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>- <span class="hljs-keyword">private</span><br><br>  - ```typescript<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-keyword">private</span> name: string;<br>        <span class="hljs-keyword">private</span> age: number;<br><br>        constructor(name: string, age: number)&#123;<br>            <span class="hljs-keyword">this</span>.name = name; <span class="hljs-comment">// 可以修改</span><br>            <span class="hljs-keyword">this</span>.age = age;<br>        &#125;<br><br>        sayHello()&#123;<br>            console.log(`大家好，我是$&#123;<span class="hljs-keyword">this</span>.name&#125;`);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>        constructor(name: string, age: number)&#123;<br>            <span class="hljs-keyword">super</span>(name, age);<br>            <span class="hljs-keyword">this</span>.name = name; <span class="hljs-comment">//子类中不能修改</span><br>        &#125;<br>    &#125;<br><br>    const p = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(&#x27;孙悟空&#x27;, <span class="hljs-number">18</span>);<br>    p.name = &#x27;猪八戒&#x27;;<span class="hljs-comment">// 不能修改</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p></li><li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p></li><li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p></li><li><p>示例：</p><ul><li><p>```typescript<br>class Person{</p><pre><code>private _name: string;constructor(name: string)&#123;    this._name = name;&#125;get name()&#123;    return this._name;&#125;set name(name: string)&#123;    this._name = name;&#125;</code></pre><p>}</p><p>const p1 = new Person(‘孙悟空’);<br>console.log(p1.name); // 通过getter读取name属性<br>p1.name = ‘猪八戒’; // 通过setter修改name属性</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>- 静态属性<br><br>  - 静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用<br><br>  - 静态属性（方法）使用<span class="hljs-keyword">static</span>开头<br><br>  - 示例：<br><br>    - ```typescript<br>      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span>&#123;</span><br>          <span class="hljs-keyword">static</span> PI = <span class="hljs-number">3.1415926</span>;<br>          <br>          <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">sum</span><span class="hljs-params">(num1: number, num2: number)</span></span>&#123;<br>              <span class="hljs-keyword">return</span> num1 + num2<br>          &#125;<br>      &#125;<br><br>      console.<span class="hljs-built_in">log</span>(Tools.PI);<br>      console.<span class="hljs-built_in">log</span>(Tools.<span class="hljs-built_in">sum</span>(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>));<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>this</p><ul><li>在类中，使用this表示当前对象</li></ul></li></ul></li><li><p>继承</p><ul><li><p>继承时面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><ul><li><p>```typescript<br>class Animal{</p><pre><code>name: string;age: number;constructor(name: string, age: number)&#123;    this.name = name;    this.age = age;&#125;</code></pre><p>}</p><p>class Dog extends Animal{</p><pre><code>bark()&#123;    console.log(`$&#123;this.name&#125;在汪汪叫！`);&#125;</code></pre><p>}</p><p>const dog = new Dog(‘旺财’, 4);<br>dog.bark();</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>- 通过继承可以在不修改类的情况下完成对类的扩展<br><br>- 重写<br><br>  - 发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写<br><br>  - 示例：<br><br>    - ```<span class="javascript">typescript</span><br><span class="javascript">      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: string;</span><br><span class="javascript">          age: number;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.name = name;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript">          &#125;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`父类中的run方法！`</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">      dog.bark();</span><br></code></pre></td></tr></table></figure></li><li><p>在子类中可以使用super来完成对父类的引用</p></li></ul></li></ul></li><li><p>抽象类（abstract class）</p><ul><li><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p></li><li><p>```typescript<br>abstract class Animal{</p><pre><code>abstract run(): void;bark()&#123;    console.log(&#39;动物在叫~&#39;);&#125;</code></pre><p>}</p><p>class Dog extends Animals{</p><pre><code>run()&#123;    console.log(&#39;狗在跑~&#39;);&#125;</code></pre><p>}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>    - 使用<span class="hljs-keyword">abstract</span>开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现<br><br><span class="hljs-comment">## 3、接口（Interface）</span><br><br>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。<br><br>- 示例（检查对象类型）：<br><br>  - ```typescript<br>    <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span></span>&#123;<br>        name: <span class="hljs-keyword">string</span>;<br>        sayHello():<span class="hljs-keyword">void</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">per: Person</span>)</span>&#123;<br>        per.sayHello();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params">&#123;name:<span class="hljs-string">&#x27;孙悟空&#x27;</span>, sayHello(<span class="hljs-params"></span>) &#123;console.log(<span class="hljs-params">`Hello, 我是 $&#123;this.name&#125;`</span>)&#125;&#125;</span>)</span>;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>示例（实现）</p><ul><li><p>```typescript<br>interface Person{</p><pre><code>name: string;sayHello():void;</code></pre><p>}</p><p>class Student implements Person{</p><pre><code>constructor(public name: string) &#123;&#125;sayHello() &#123;    console.log(&#39;大家好，我是&#39;+this.name);&#125;</code></pre><p>}</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada"><br>  - ​<br><br>## <span class="hljs-number">4</span>、泛型（<span class="hljs-keyword">Generic</span>）<br><br>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。<br><br>- 举个例子：<br><br>  - ```typescript<br>    <span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(arg: any): any&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">arg</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p></li><li><p>使用泛型：</p></li><li><p>```typescript<br>function test<T>(arg: T): T{</p><pre><code>return arg;</code></pre><p>}</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>-<span class="ruby"> 这里的<span class="hljs-string">``</span><span class="hljs-string">`&lt;T&gt;`</span><span class="hljs-string">``</span>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</span><br><span class="ruby"></span><br>-<span class="ruby"> 那么如何使用上边的函数呢？</span><br><span class="ruby"></span><br>  -<span class="ruby"> 方式一（直接使用）：</span><br><span class="ruby"></span><br>    -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`typescript</span></span><br><span class="hljs-string"><span class="ruby"></span></span>      test(10)<br></code></pre></td></tr></table></figure><ul><li><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p></li><li><p>方式二（指定类型）：</p><ul><li>```typescript<br>test<number>(10)<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada"><br>    - 也可以在函数后手动指定泛型<br><br>- 可以同时指定多个泛型，泛型间使用逗号隔开：<br><br>  - ```typescript<br>    <span class="hljs-keyword">function</span> <span class="hljs-title">test&lt;T,</span> K&gt;(a: T, b: K): K&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">b</span>;<br>    &#125;<br><br>    test&lt;number, string&gt;(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用</p></li></ul></li><li><p>类中同样可以使用泛型：</p><ul><li><p>```typescript<br>class MyClass<T>{</p><pre><code>prop: T;constructor(prop: T)&#123;    this.prop = prop;&#125;</code></pre><p>}</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada"><br>- 除此之外，也可以对泛型的范围进行约束<br><br>  - ```typescript<br>    <span class="hljs-keyword">interface</span> MyInter&#123;<br>        length: number;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title">test&lt;T</span> extends MyInter&gt;(arg: T): number&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">arg.length</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScipt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript快速入门</title>
    <link href="/2021/11/14/TypeScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/11/14/TypeScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的TS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol><li>下载Node.js<ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li>安装Node.js</li><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个ts文件</li><li>使用tsc对ts文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><ul><li><p>```typescript<br>let 变量: 类型;</p><p>let 变量: 类型 = 值;</p><p>function fn(参数: 类型, 参数: 类型): 类型{</p><pre><code>...</code></pre><p>}</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>- 自动类型判断<br><br>  - TS拥有自动的类型判断机制<br>  - 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型<br>  - 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明<br><br>- 类型：<br><br>  |<span class="hljs-string">  类型   </span>|<span class="hljs-string">       例子        </span>|<span class="hljs-string">              描述              </span>|<br>  |<span class="hljs-string"> :-----: </span>|<span class="hljs-string"> :---------------: </span>|<span class="hljs-string"> :----------------------------: </span>|<br>  |<span class="hljs-string"> number  </span>|<span class="hljs-string">    1, -33, 2.5    </span>|<span class="hljs-string">            任意数字            </span>|<br>  |<span class="hljs-string"> string  </span>|<span class="hljs-string"> &#x27;hi&#x27;, &quot;hi&quot;, `hi`  </span>|<span class="hljs-string">           任意字符串           </span>|<br>  |<span class="hljs-string"> boolean </span>|<span class="hljs-string">    true、false    </span>|<span class="hljs-string">       布尔值true或false        </span>|<br>  |<span class="hljs-string"> 字面量  </span>|<span class="hljs-string">      其本身       </span>|<span class="hljs-string">  限制变量的值就是该字面量的值  </span>|<br>  |<span class="hljs-string">   any   </span>|<span class="hljs-string">         *         </span>|<span class="hljs-string">            任意类型            </span>|<br>  |<span class="hljs-string"> unknown </span>|<span class="hljs-string">         *         </span>|<span class="hljs-string">         类型安全的any          </span>|<br>  |<span class="hljs-string">  void   </span>|<span class="hljs-string"> 空值（undefined） </span>|<span class="hljs-string">     没有值（或undefined）      </span>|<br>  |<span class="hljs-string">  never  </span>|<span class="hljs-string">      没有值       </span>|<span class="hljs-string">          不能是任何值          </span>|<br>  |<span class="hljs-string"> object  </span>|<span class="hljs-string">  &#123;name:&#x27;孙悟空&#x27;&#125;  </span>|<span class="hljs-string">          任意的JS对象          </span>|<br>  |<span class="hljs-string">  array  </span>|<span class="hljs-string">      [1,2,3]      </span>|<span class="hljs-string">           任意JS数组           </span>|<br>  |<span class="hljs-string">  tuple  </span>|<span class="hljs-string">       [4,5]       </span>|<span class="hljs-string"> 元素，TS新增类型，固定长度数组 </span>|<br>  |<span class="hljs-string">  enum   </span>|<span class="hljs-string">    enum&#123;A, B&#125;     </span>|<span class="hljs-string">       枚举，TS中新增类型       </span>|<br><br>- number<br><br>  - ```typescript<br>    let decimal: number = 6;<br>    let hex: number = 0xf00d;<br>    let binary: number = 0b1010;<br>    let octal: number = 0o744;<br>    let big: bigint = 100n;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>boolean</p><ul><li>```typescript<br>let isDone: boolean = false;<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br>-<span class="hljs-built_in"> string</span><br><br>  - ```typescript<br>    <span class="hljs-keyword">let</span> color:<span class="hljs-built_in"> string</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>    color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><br>    <span class="hljs-keyword">let</span> fullName:<span class="hljs-built_in"> string</span> = `Bob Bobbington`;<br>    <span class="hljs-keyword">let</span> age:<span class="hljs-built_in"> number</span> = <span class="hljs-number">37</span>;<br>    <span class="hljs-keyword">let</span> sentence:<span class="hljs-built_in"> string</span> = `Hello, my<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> $&#123;fullName&#125;.<br><br>    I<span class="hljs-string">&#x27;ll be $&#123;age + 1&#125; years old next month.`;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><p>```typescript<br>let color: ‘red’ | ‘blue’ | ‘black’;<br>let num: 1 | 2 | 3 | 4 | 5;</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix"><br>- any<br><br>  - ```typescript<br>    <span class="hljs-keyword">let</span> d: <span class="hljs-attr">any</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-attr">d</span> = &#x27;hello&#x27;;<br>    <span class="hljs-attr">d</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>unknown</p><ul><li>```typescript<br>let notSure: unknown = 4;<br>notSure = ‘hello’;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>- <span class="hljs-keyword">void</span><br><br>  - ```<span class="javascript">typescript</span><br><span class="javascript">    <span class="hljs-keyword">let</span> unusable: <span class="hljs-keyword">void</span> = <span class="hljs-literal">undefined</span>;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>never</p><ul><li>```typescript<br>function error(message: string): never {<br>  throw new Error(message);<br>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- <span class="hljs-built_in">object</span>（没啥用）<br><br>  - ```typescript<br>    <span class="hljs-keyword">let</span> obj: <span class="hljs-built_in">object</span> = &#123;属性名：属性值&#125;;<br>    <span class="hljs-comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span><br>    <span class="hljs-comment">// 语法：&#123;属性名:属性值,属性名:属性值&#125;</span><br>    <span class="hljs-comment">// 在属性名后边加上?，表示属性是可选的</span><br>    <span class="hljs-keyword">let</span> b: &#123;name: <span class="hljs-built_in">string</span>, age?: number&#125;;<br>    b = &#123;name: <span class="hljs-string">&#x27;孙悟空&#x27;</span>, age: <span class="hljs-number">18</span>&#125;;<br><br>    <span class="hljs-comment">// [propName: string]: any 表示任意类型的属性</span><br>    <span class="hljs-keyword">let</span> c: &#123;name: <span class="hljs-built_in">string</span>, [propName: <span class="hljs-built_in">string</span>]: any&#125;;<br>    c = &#123;name: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, age: <span class="hljs-number">18</span>, gender: <span class="hljs-string">&#x27;男&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>array</p><ul><li>```typescript<br>let list: number[] = [1, 2, 3];<br>let list: Array<number> = [1, 2, 3];<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- tuple<br><br>  - ```typescript<br>    <span class="hljs-comment">//固定长度的数组</span><br>    <span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, number];<br>    x = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">10</span>]; <br></code></pre></td></tr></table></figure></li></ul></li><li><p>enum</p><ul><li><p>```typescript<br>enum Color {<br>  Red,<br>  Green,<br>  Blue,<br>}<br>let c: Color = Color.Green;</p><p>enum Color {<br>  Red = 1,<br>  Green,<br>  Blue,<br>}<br>let c: Color = Color.Green;</p><p>enum Color {<br>  Red = 1,<br>  Green = 2,<br>  Blue = 4,<br>}<br>let c: Color = Color.Green;</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>-<span class="ruby"> 类型断言</span><br><span class="ruby"></span><br>  -<span class="ruby"> 有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</span><br><span class="ruby"></span><br>  -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`typescript</span></span><br><span class="hljs-string"><span class="ruby"></span></span>    s = e as string<br>    s = &lt;string&gt;e<br></code></pre></td></tr></table></figure></li><li><p>​</p><ul><li><p>第一种</p><ul><li>```typescript<br>let someValue: unknown = “this is a string”;<br>let strLength: number = (someValue as string).length;<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>- 第二种<br><br>  - ```typescript<br>    <span class="hljs-built_in">let</span> someValue: <span class="hljs-literal">unknown</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br>    <span class="hljs-built_in">let</span> strLength: number = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).<span class="hljs-built_in">length</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p></li><li><p>示例：</p><ul><li><p>```powershell<br>tsc xxx.ts -w</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>-<span class="ruby"> 自动编译整个项目</span><br><span class="ruby"></span><br>  -<span class="ruby"> 如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</span><br><span class="ruby"></span><br>  -<span class="ruby"> 但是能直接使用tsc命令的前提时，要先tsc --init在项目根目录下创建一个ts的配置文件 tsconfig.json</span><br><span class="ruby"></span><br>  -<span class="ruby"> tsconfig.json是一个JSON文件，添加配置文件后，只需 tsc 命令即可完成对整个项目的编译</span><br><span class="ruby"></span><br>  -<span class="ruby"> 配置选项：</span><br><span class="ruby"></span><br>    -<span class="ruby"> <span class="hljs-keyword">include</span></span><br><span class="ruby"></span><br>      -<span class="ruby"> 定义希望被编译文件所在的目录</span><br><span class="ruby"></span><br>      -<span class="ruby"> 默认值：[<span class="hljs-string">&quot;\*\*/\*&quot;</span>]</span><br><span class="ruby"></span><br>      -<span class="ruby"> 示例：</span><br><span class="ruby"></span><br>        -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`json</span></span><br><span class="hljs-string"><span class="ruby"></span></span>          &quot;include&quot;:[&quot;src/**/*&quot;, &quot;tests/**/*&quot;]<br></code></pre></td></tr></table></figure><ul><li>上述示例中，所有src目录和tests目录下的文件都会被编译</li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><p>```json<br>“exclude”: [“./src/hello/**/*”]</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>    -<span class="ruby"> 上述示例中，src下hello目录下的文件都不会被编译</span><br><span class="ruby"></span><br>-<span class="ruby"> extends</span><br><span class="ruby"></span><br>  -<span class="ruby"> 定义被继承的配置文件</span><br><span class="ruby"></span><br>  -<span class="ruby"> 示例：</span><br><span class="ruby"></span><br>    -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`json</span></span><br><span class="hljs-string"><span class="ruby"></span></span>      &quot;extends&quot;: &quot;./configs/base&quot;<br></code></pre></td></tr></table></figure></li><li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><p>```json<br>“files”: [</p><pre><code>&quot;core.ts&quot;,&quot;sys.ts&quot;,&quot;types.ts&quot;,&quot;scanner.ts&quot;,&quot;parser.ts&quot;,&quot;utilities.ts&quot;,&quot;binder.ts&quot;,&quot;checker.ts&quot;,&quot;tsc.ts&quot;</code></pre><p>  ]</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>  -<span class="ruby"> 列表中的文件都会被TS编译器所编译</span><br><span class="ruby"></span><br>-<span class="ruby"> compilerOptions</span><br><span class="ruby"></span><br>  -<span class="ruby"> 编译选项是配置文件中非常重要也比较复杂的配置选项</span><br><span class="ruby"></span><br>  -<span class="ruby"> 在compilerOptions中包含多个子选项，用来完成对编译的配置</span><br><span class="ruby"></span><br>    -<span class="ruby"> 项目选项</span><br><span class="ruby"></span><br>      -<span class="ruby"> target</span><br><span class="ruby"></span><br>        -<span class="ruby"> 设置ts代码编译的目标版本</span><br><span class="ruby"></span><br>        -<span class="ruby"> 可选值：</span><br><span class="ruby"></span><br>          -<span class="ruby"> ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext（最新版本）</span><br><span class="ruby"></span><br>        -<span class="ruby"> 示例：</span><br><span class="ruby"></span><br>          -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`json</span></span><br><span class="hljs-string"><span class="ruby"></span></span>            &quot;compilerOptions&quot;: &#123;<br>                &quot;target&quot;: &quot;ES6&quot;<br>            &#125;<br></code></pre></td></tr></table></figure><pre><code>  - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</code></pre><ul><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><ul><li>```json<br>“compilerOptions”: {<pre><code>&quot;target&quot;: &quot;ES6&quot;,&quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;],&quot;outDir&quot;: &quot;dist&quot;,&quot;outFile&quot;: &quot;dist/aa.js&quot;</code></pre>}<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>-<span class="ruby"> <span class="hljs-class"><span class="hljs-keyword">module</span></span></span><br><span class="ruby"></span><br>  -<span class="ruby"> 设置编译后代码使用的模块化系统</span><br><span class="ruby"></span><br>  -<span class="ruby"> 可选值：</span><br><span class="ruby"></span><br>    -<span class="ruby"> CommonJS、UMD、AMD、System、ES2020、ESNext、None</span><br><span class="ruby"></span><br>  -<span class="ruby"> 示例：</span><br><span class="ruby"></span><br>    -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`typescript</span></span><br><span class="hljs-string"><span class="ruby"></span></span>      &quot;compilerOptions&quot;: &#123;<br>          &quot;module&quot;: &quot;CommonJS&quot;<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li>```json<br>“compilerOptions”: {<pre><code>&quot;outDir&quot;: &quot;dist&quot;</code></pre>}<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>    -<span class="ruby"> 设置后编译后的js文件将会生成到dist目录</span><br><span class="ruby"></span><br>-<span class="ruby"> outFile</span><br><span class="ruby"></span><br>  -<span class="ruby"> 将所有的文件编译为一个js文件</span><br><span class="ruby"></span><br>  -<span class="ruby"> 默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果<span class="hljs-class"><span class="hljs-keyword">module</span>制定了<span class="hljs-title">None</span>、<span class="hljs-title">System</span>或<span class="hljs-title">AMD</span>则会将模块一起合并到文件之中</span></span><br><span class="ruby"></span><br>  -<span class="ruby"> 示例：</span><br><span class="ruby"></span><br>    -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`json</span></span><br><span class="hljs-string"><span class="ruby"></span></span>      &quot;compilerOptions&quot;: &#123;<br>          &quot;outFile&quot;: &quot;dist/app.js&quot;<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><ul><li>```json<br>“compilerOptions”: {<pre><code>&quot;rootDir&quot;: &quot;./src&quot;</code></pre>}<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- allowJs<br><br>  - 是否对js文件编译<br><br>- checkJs<br><br>  - 是否对js文件进行检查<br><br>  - 示例：<br><br>    - ```json<br>      <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"> 严格检查</span><br><span class="ruby"></span><br>  -<span class="ruby"> strict</span><br><span class="ruby"></span>    -<span class="ruby"> 启用所有的严格检查，默认值为<span class="hljs-literal">true</span>，设置后相当于开启了所有的严格检查</span><br><span class="ruby"></span>  -<span class="ruby"> alwaysStrict</span><br><span class="ruby"></span>    -<span class="ruby"> 总是以严格模式对代码进行编译</span><br><span class="ruby"></span>  -<span class="ruby"> noImplicitAny</span><br><span class="ruby"></span>    -<span class="ruby"> 禁止隐式的any类型</span><br><span class="ruby"></span>  -<span class="ruby"> noImplicitThis</span><br><span class="ruby"></span>    -<span class="ruby"> 禁止类型不明确的this</span><br><span class="ruby"></span>  -<span class="ruby"> strictBindCallApply</span><br><span class="ruby"></span>    -<span class="ruby"> 严格检查bind、call和apply的参数列表</span><br><span class="ruby"></span>  -<span class="ruby"> strictFunctionTypes</span><br><span class="ruby"></span>    -<span class="ruby"> 严格检查函数的类型</span><br><span class="ruby"></span>  -<span class="ruby"> strictNullChecks</span><br><span class="ruby"></span>    -<span class="ruby"> 严格的空值检查</span><br><span class="ruby"></span>  -<span class="ruby"> strictPropertyInitialization</span><br><span class="ruby"></span>    -<span class="ruby"> 严格检查属性是否初始化</span><br><span class="ruby"></span><br>-<span class="ruby"> 额外检查</span><br><span class="ruby"></span><br>  -<span class="ruby"> noFallthroughCasesInSwitch</span><br><span class="ruby"></span>    -<span class="ruby"> 检查switch语句包含正确的<span class="hljs-keyword">break</span></span><br><span class="ruby"></span>  -<span class="ruby"> noImplicitReturns</span><br><span class="ruby"></span>    -<span class="ruby"> 检查函数没有隐式的返回值</span><br><span class="ruby"></span>  -<span class="ruby"> noUnusedLocals</span><br><span class="ruby"></span>    -<span class="ruby"> 检查未使用的局部变量</span><br><span class="ruby"></span>  -<span class="ruby"> noUnusedParameters</span><br><span class="ruby"></span>    -<span class="ruby"> 检查未使用的参数</span><br><span class="ruby"></span><br>-<span class="ruby"> 高级</span><br><span class="ruby"></span><br>  -<span class="ruby"> allowUnreachableCode</span><br><span class="ruby"></span>    -<span class="ruby"> 检查不可达代码</span><br><span class="ruby"></span>    -<span class="ruby"> 可选值：</span><br><span class="ruby"></span>      -<span class="ruby"> <span class="hljs-literal">true</span>，忽略不可达代码</span><br><span class="ruby"></span>      -<span class="ruby"> <span class="hljs-literal">false</span>，不可达代码将引起错误</span><br><span class="ruby"></span>  -<span class="ruby"> noEmitOnError</span><br><span class="ruby"></span>    -<span class="ruby"> 有错误的情况下不进行编译</span><br><span class="ruby"></span>    -<span class="ruby"> 默认值：<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><h2 id="4、webpack"><a href="#4、webpack" class="headerlink" title="4、webpack"></a>4、webpack</h2><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code> npm init -y</code><ul><li>主要作用：创建package.json文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建webpack的配置文件webpack.config.js</p><ul><li><p>```javascript<br>const path = require(“path”);<br>const HtmlWebpackPlugin = require(“html-webpack-plugin”);<br>const { CleanWebpackPlugin } = require(“clean-webpack-plugin”);</p><p>module.exports = {</p><pre><code>optimization:&#123;    minimize: false // 关闭代码压缩，可选&#125;,entry: &quot;./src/index.ts&quot;,devtool: &quot;inline-source-map&quot;,devServer: &#123;    contentBase: &#39;./dist&#39;&#125;,output: &#123;    path: path.resolve(__dirname, &quot;dist&quot;),    filename: &quot;bundle.js&quot;,    environment: &#123;        arrowFunction: false // 关闭webpack的箭头函数，可选    &#125;&#125;,resolve: &#123;    extensions: [&quot;.ts&quot;, &quot;.js&quot;]&#125;,module: &#123;    rules: [        &#123;            test: /\.ts$/,            use: &#123;               loader: &quot;ts-loader&quot;                 &#125;,            exclude: /node_modules/        &#125;    ]&#125;,plugins: [    new CleanWebpackPlugin(),    new HtmlWebpackPlugin(&#123;        title:&#39;TS测试&#39;    &#125;),]</code></pre><p>}</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">4</span>. 根目录下创建tsconfig.json，配置可以根据自己需要<br><br>   - ```json<br>     &#123;<br>         <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>             <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>             <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>             <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>         &#125;<br>     &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改package.json添加如下配置</p><ul><li><p>```json<br>{<br>  …略…<br>  “scripts”: {</p><pre><code>&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,&quot;build&quot;: &quot;webpack&quot;,&quot;start&quot;: &quot;webpack serve --open chrome.exe&quot;</code></pre><p>  },<br>  …略…<br>}</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br>  6. 在src下创建ts文件，并在并命令行执行```npm run <span class="hljs-keyword">build</span><span class="hljs-symbol">``</span><span class="hljs-symbol">`对代码进行编译，或者执行`</span><span class="hljs-symbol">``</span>npm <span class="hljs-keyword">start</span><span class="hljs-symbol">``</span><span class="hljs-symbol">`来启动开发服务器</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">## 5、Babel</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">- 经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  1. 安装依赖包：</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">     - `</span><span class="hljs-symbol">``</span>npm i -D @babel/core @babel/preset-env babel-loader core-js<span class="hljs-symbol">``</span><span class="hljs-symbol">`</span><br><span class="hljs-symbol">     - 共安装了4个包，分别是：</span><br><span class="hljs-symbol">       - @babel/core</span><br><span class="hljs-symbol">         - babel的核心工具</span><br><span class="hljs-symbol">       - @babel/preset-env</span><br><span class="hljs-symbol">         - babel的预定义环境</span><br><span class="hljs-symbol">       - @babel-loader</span><br><span class="hljs-symbol">         - babel在webpack中的加载器</span><br><span class="hljs-symbol">       - core-js</span><br><span class="hljs-symbol">         - core-js用来使老版本的浏览器支持新版ES语法</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  2. 修改webpack.config.js配置文件</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">     - `</span><span class="hljs-symbol">``</span>javascript<br>       ...略...<br>       module: &#123;<br>           rules: [<br>               &#123;<br>                   test: /\.ts$/,<br>                   <span class="hljs-keyword">use</span>: [<br>                       &#123;<br>                           loader: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>                           options:&#123;<br>                               presets: [<br>                                   [<br>                                       <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                                       &#123;<br>                                           <span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                                               <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                                               <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                                           &#125;,<br>                                           <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                                           <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                                       &#125;<br>                                   ]<br>                               ]<br>                           &#125;<br>                       &#125;,<br>                       &#123;<br>                           loader: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br><br>                       &#125;<br>                   ],<br>                   <span class="hljs-keyword">exclude</span>: /node_modules/<br>               &#125;<br>           ]<br>       &#125;<br>       ...略...<br></code></pre></td></tr></table></figure></li><li><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p></li></ul></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScipt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack扩展</title>
    <link href="/2021/11/14/webpack%E6%89%A9%E5%B1%95/"/>
    <url>/2021/11/14/webpack%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack5"><a href="#webpack5" class="headerlink" title="webpack5"></a>webpack5</h1><p>此版本重点关注以下内容:</p><ul><li>通过持久缓存提高构建性能.</li><li>使用更好的算法和默认值来改善长期缓存.</li><li>通过更好的树摇和代码生成来改善捆绑包大小.</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>npm i webpack@next webpack-cli -D</li></ul><h2 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p><p>迁移：</p><ul><li>尽可能尝试使用与前端兼容的模块。</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li></ul><h2 id="Chunk-和模块-ID"><a href="#Chunk-和模块-ID" class="headerlink" title="Chunk 和模块 ID"></a>Chunk 和模块 ID</h2><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p><p><code>chunkIds: &quot;deterministic&quot;, moduleIds: &quot;deterministic&quot;</code></p><h2 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><ol><li>webpack 现在能够处理对嵌套模块的 tree shaking</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// inner.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// module.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> inner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./inner&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123; inner &#125;;<br><br><span class="hljs-comment">// user.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-built_in">module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">module</span>.inner.a);<br></code></pre></td></tr></table></figure><p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p><ol><li>webpack 现在能够多个模块之前的关系</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; something &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./something&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">usingSomething</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> something;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> usingSomething();<br>&#125;<br></code></pre></td></tr></table></figure><p>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></p><ol><li>webpack 现在能处理对 Commonjs 的 tree shaking</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p><p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p><p>如：<code>output.ecmaVersion: 2015</code></p><h2 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack4</span><br><span class="hljs-attr">minSize</span>: <span class="hljs-number">30000</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack5</span><br><span class="hljs-attr">minSize</span>: &#123;<br>  <span class="hljs-attr">javascript</span>: <span class="hljs-number">30000</span>,<br>  <span class="hljs-attr">style</span>: <span class="hljs-number">50000</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置缓存</span><br><span class="hljs-attr">cache</span>: &#123;<br>  <span class="hljs-comment">// 磁盘存储</span><br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;filesystem&quot;</span>,<br>  <span class="hljs-attr">buildDependencies</span>: &#123;<br>    <span class="hljs-comment">// 当配置修改时，缓存失效</span><br>    <span class="hljs-attr">config</span>: [__filename]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p><h2 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul><li><code>entry: &quot;./src/index.js</code></li><li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li><li><code>output.filename: &quot;[name].js&quot;</code></li></ul><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p><a href="https://github.com/webpack/changelog-v5">https://github.com/webpack/changelog-v5</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack（二）</title>
    <link href="/2021/11/14/webpack%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/11/14/webpack%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第五章-webpack优化配置"><a href="#第五章-webpack优化配置" class="headerlink" title="第五章 webpack优化配置"></a>第五章 webpack优化配置</h1><h5 id="优化配置介绍"><a href="#优化配置介绍" class="headerlink" title="优化配置介绍"></a>优化配置介绍</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># webpack性能优化<br>* 开发环境性能优化<br>* 生产环境性能优化<br><br>## 开发环境性能优化<br>* 优化打包构建速度<br>  * HMR<br>* 优化代码调试<br>  * source-map<br><br>## 生产环境性能优化<br>* 优化打包构建速度<br>  * oneOf<br>  * babel缓存<br>  * 多进程打包<br>  * externals<br>  * dll<br>* 优化代码运行的性能<br>  * 缓存(hash-chunkhash-contenthash)<br>  * tree shaking<br>  * code split<br>  * 懒加载/预加载<br>  * pwa<br></code></pre></td></tr></table></figure><h2 id="5-1-HMR"><a href="#5-1-HMR" class="headerlink" title="5.1 HMR"></a>5.1 HMR</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  HMR: hot module replacement 热模块替换 / 模块热替换</span><br><span class="hljs-comment">    作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块） </span><br><span class="hljs-comment">      极大提升构建速度</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      样式文件：可以使用HMR功能：因为style-loader内部实现了~</span><br><span class="hljs-comment">      js文件：默认不能使用HMR功能 --&gt; 需要修改js代码，添加支持HMR功能的代码</span><br><span class="hljs-comment">        注意：HMR功能对js的处理，只能处理非入口js文件的其他文件。</span><br><span class="hljs-comment">      html文件: 默认不能使用HMR功能.同时会导致问题：html文件不能热更新了~ （不用做HMR功能）</span><br><span class="hljs-comment">        解决：修改entry入口，将html文件引入</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attr">entry</span>: [<span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/index.html&#x27;</span>]<br>...<br><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 开启HMR功能</span><br>    <span class="hljs-comment">// 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span><br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span><br>  &#125;<br>...<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">module</span>.hot) &#123;<br>  <span class="hljs-comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span><br>  <span class="hljs-built_in">module</span>.hot.accept(<span class="hljs-string">&#x27;./print.js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 方法会监听 print.js 文件的变化，一旦发生变化，其他模块不会重新打包构建。</span><br>    <span class="hljs-comment">// 会执行后面的回调函数</span><br>    print();<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-source-map"><a href="#5-2-source-map" class="headerlink" title="5.2 source-map"></a>5.2 source-map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">devtool: <span class="hljs-string">&#x27;eval-source-map&#x27;</span><br>source-map: 一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）<br><br>    [inline-|hidden-|<span class="hljs-built_in">eval</span>-][nosources-][cheap-[<span class="hljs-built_in">module</span>-]]source-map<br><br>    source-map：外部<br>      错误代码准确信息 和 源代码的错误位置<br>    inline-source-map：内联<br>      只生成一个内联source-map<br>      错误代码准确信息 和 源代码的错误位置<br>    hidden-source-map：外部<br>      错误代码错误原因，但是没有错误位置<br>      不能追踪源代码错误，只能提示到构建后代码的错误位置<br>    <span class="hljs-built_in">eval</span>-source-map：内联<br>      每一个文件都生成对应的source-map，都在<span class="hljs-built_in">eval</span><br>      错误代码准确信息 和 源代码的错误位置<br>    nosources-source-map：外部<br>      错误代码准确信息, 但是没有任何源代码信息<br>    cheap-source-map：外部<br>      错误代码准确信息 和 源代码的错误位置 <br>      只能精确的行<br>    cheap-<span class="hljs-built_in">module</span>-source-map：外部<br>      错误代码准确信息 和 源代码的错误位置 <br>      <span class="hljs-built_in">module</span>会将loader的source map加入<br><br>    内联 和 外部的区别：<span class="hljs-number">1.</span> 外部生成了文件，内联没有 <span class="hljs-number">2.</span> 内联构建速度更快<br><br>    开发环境：速度快，调试更友好<br>      速度快(<span class="hljs-built_in">eval</span>&gt;inline&gt;cheap&gt;...)<br>        <span class="hljs-built_in">eval</span>-cheap-souce-map<br>        <span class="hljs-built_in">eval</span>-source-map<br>      调试更友好  <br>        souce-map<br>        cheap-<span class="hljs-built_in">module</span>-souce-map<br>        cheap-souce-map<br><br>      --&gt; <span class="hljs-built_in">eval</span>-source-map  / <span class="hljs-built_in">eval</span>-cheap-<span class="hljs-built_in">module</span>-souce-map<br><br>    生产环境：源代码要不要隐藏? 调试要不要更友好<br>      内联会让代码体积变大，所以在生产环境不用内联<br>      nosources-source-map 全部隐藏<br>      hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br><br>      --&gt; source-map / cheap-<span class="hljs-built_in">module</span>-souce-map<br></code></pre></td></tr></table></figure><h2 id="5-3-oneOf"><a href="#5-3-oneOf" class="headerlink" title="5.3 oneOf"></a>5.3 oneOf</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以下loader只会匹配一个</span><br>       <span class="hljs-comment">// 注意：不能有两个配置处理同一种类型文件</span><br>       <span class="hljs-attr">oneOf</span>: [<br>         &#123;<br>           <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>           use: [...commonCssLoader]<br>         &#125;,<br>         ...<br>         ]<br></code></pre></td></tr></table></figure><h2 id="5-4-缓存"><a href="#5-4-缓存" class="headerlink" title="5.4 缓存"></a>5.4 缓存</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">缓存：<br>    babel缓存<br>      <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span><br>      --&gt; 让第二次打包构建速度更快<br>    文件资源缓存<br>      <span class="hljs-attr">hash</span>: 每次wepack构建时会生成一个唯一的hash值。<br>        问题: 因为js和css同时使用一个hash值。<br>          如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）<br>      chunkhash：根据chunk生成的hash值。如果打包来源于同一个chunk，那么hash值就一样<br>        问题: js和css的hash值还是一样的<br>          因为css是在js中被引入的，所以同属于一个chunk<br>      <span class="hljs-attr">contenthash</span>: 根据文件的内容生成hash值。不同文件hash值一定不一样    <br>      --&gt; 让代码上线运行缓存更好使用<br></code></pre></td></tr></table></figure><h2 id="5-5-tree-shaking"><a href="#5-5-tree-shaking" class="headerlink" title="5.5 tree shaking"></a>5.5 tree shaking</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tree shaking：去除无用代码<br>    前提：<span class="hljs-number">1.</span> 必须使用ES6模块化  <span class="hljs-number">2.</span> 开启production环境<br>    作用: 减少代码体积<br><br>    在package.json中配置 <br>      <span class="hljs-string">&quot;sideEffects&quot;</span>: <span class="hljs-literal">false</span> 所有代码都没有副作用（都可以进行tree shaking）<br>        问题：可能会把css / @babel/polyfill （副作用）文件干掉<br>      <span class="hljs-string">&quot;sideEffects&quot;</span>: [<span class="hljs-string">&quot;*.css&quot;</span>, <span class="hljs-string">&quot;*.less&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="5-6-code-split"><a href="#5-6-code-split" class="headerlink" title="5.6 code split"></a>5.6 code split</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 单入口</span><br>  <span class="hljs-comment">// entry: &#x27;./src/js/index.js&#x27;,</span><br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-comment">// 多入口：有一个入口，最终输出就有一个bundle</span><br>    <span class="hljs-attr">index</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>    <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;./src/js/test.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// [name]：取文件名</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>  &#125;,<br>      <br>      <br>      <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 可以将node_modules中代码单独打包一个chunk最终输出</span><br><span class="hljs-comment">    2. 自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>    &#125;<br>  &#125;,<br>      <br>      <br>      <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  通过js代码，让某个文件被单独打包成一个chunk</span><br><span class="hljs-comment">  import动态导入语法：能将某个文件单独打包</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27; */</span><span class="hljs-string">&#x27;./test&#x27;</span>)<br>  .then(<span class="hljs-function">(<span class="hljs-params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 文件加载成功~</span><br>    <span class="hljs-comment">// eslint-disable-next-line</span><br>    <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>  &#125;)<br>  .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// eslint-disable-next-line</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件加载失败~&#x27;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="5-7-lazy-loading"><a href="#5-7-lazy-loading" class="headerlink" title="5.7 lazy loading"></a>5.7 lazy loading</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 懒加载~：当文件需要使用时才加载~</span><br>  <span class="hljs-comment">// 预加载 prefetch：会在使用之前，提前加载js文件 </span><br>  <span class="hljs-comment">// 正常加载可以认为是并行加载（同一时间加载多个文件）  </span><br>  <span class="hljs-comment">// 预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</span><br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span><span class="hljs-string">&#x27;./test&#x27;</span>).then(<span class="hljs-function">(<span class="hljs-params">&#123; mul &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-8-PWA"><a href="#5-8-PWA" class="headerlink" title="5.8 PWA"></a>5.8 PWA</h2><p>下载安装包 </p><p>npm install –save-dev workbox-webpack-plugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> WorkboxWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;workbox-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  PWA: 渐进式网络开发应用程序(离线可访问)</span><br><span class="hljs-comment">    workbox --&gt; workbox-webpack-plugin</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 帮助serviceworker快速启动</span><br><span class="hljs-comment">        2. 删除旧的 serviceworker</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        生成一个 serviceworker 配置文件~</span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-attr">clientsClaim</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span><br>    &#125;)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  1. eslint不认识 window、navigator全局变量</span><br><span class="hljs-comment">    解决：需要修改package.json中eslintConfig配置</span><br><span class="hljs-comment">      &quot;env&quot;: &#123;</span><br><span class="hljs-comment">        &quot;browser&quot;: true // 支持浏览器端全局变量</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">   2. sw代码必须运行在服务器上</span><br><span class="hljs-comment">      --&gt; nodejs</span><br><span class="hljs-comment">      --&gt;</span><br><span class="hljs-comment">        npm i serve -g</span><br><span class="hljs-comment">        serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 注册serviceWorker</span><br><span class="hljs-comment">// 处理兼容性问题</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    navigator.serviceWorker<br>      .register(<span class="hljs-string">&#x27;/service-worker.js&#x27;</span>)<br>      .then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册成功了~&#x27;</span>);<br>      &#125;)<br>      .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册失败了~&#x27;</span>);<br>      &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-8-多进程打包"><a href="#5-8-多进程打包" class="headerlink" title="5.8 多进程打包"></a>5.8 多进程打包</h2><p>下载安装包 </p><p>npm install –save-dev thread-loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br> exclude: <span class="hljs-regexp">/node_modules/</span>,<br> use: [<br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">   开启多进程打包。 </span><br><span class="hljs-comment">   进程启动大概为600ms，进程通信也有开销。</span><br><span class="hljs-comment">   只有工作消耗时间比较长，才需要多进程打包</span><br><span class="hljs-comment"> */</span><br>  &#123;<br>   <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;thread-loader&#x27;</span>,<br>   <span class="hljs-attr">options</span>: &#123;<br>     <span class="hljs-attr">workers</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 进程2个</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="5-9-externals"><a href="#5-9-externals" class="headerlink" title="5.9 externals"></a>5.9 externals</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">externals: &#123;<br>    <span class="hljs-comment">// 拒绝jQuery被打包进来</span><br>    <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;jQuery&#x27;</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="5-10-dll"><a href="#5-10-dll" class="headerlink" title="5.10 dll"></a>5.10 dll</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span><br><span class="hljs-comment">    当你运行 webpack 时，默认查找 webpack.config.js 配置文件</span><br><span class="hljs-comment">    需求：需要运行 webpack.dll.js 文件</span><br><span class="hljs-comment">      --&gt; webpack --config webpack.dll.js</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-comment">// 最终打包生成的[name] --&gt; jquery</span><br>    <span class="hljs-comment">// [&#x27;jquery&#x27;] --&gt; 要打包的库是jquery</span><br>    <span class="hljs-attr">jquery</span>: [<span class="hljs-string">&#x27;jquery&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;dll&#x27;</span>),<br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;[name]_[hash]&#x27;</span> <span class="hljs-comment">// 打包的库里面向外暴露出去的内容叫什么名字</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 打包生成一个 manifest.json --&gt; 提供和jquery映射</span><br>    <span class="hljs-keyword">new</span> webpack.DllPlugin(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name]_[hash]&#x27;</span>, <span class="hljs-comment">// 映射库的暴露的内容名称</span><br>      <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;dll/manifest.json&#x27;</span>) <span class="hljs-comment">// 输出文件路径</span><br>    &#125;)<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="第六章-webpack配置详情"><a href="#第六章-webpack配置详情" class="headerlink" title="第六章 webpack配置详情"></a>第六章 webpack配置详情</h1><h2 id="6-1-entry"><a href="#6-1-entry" class="headerlink" title="6.1 entry"></a>6.1 entry</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">entry: 入口起点<br>    <span class="hljs-number">1.</span> string --&gt; <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br>      单入口<br>      打包形成一个chunk。 输出一个bundle文件。<br>      此时chunk的名称默认是 main<br>    <span class="hljs-number">2.</span> array  --&gt; [<span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/add.js&#x27;</span>]<br>      多入口<br>      所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。<br>        --&gt; 只有在HMR功能中让html热更新生效~<br>    <span class="hljs-number">3.</span> object<br>      多入口<br>      有几个入口文件就形成几个chunk，输出几个bundle文件<br>      此时chunk的名称是 key<br><br>      --&gt; 特殊用法<br>        &#123;<br>          <span class="hljs-comment">// 所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br>          <span class="hljs-attr">index</span>: [<span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/count.js&#x27;</span>], <br>          <span class="hljs-comment">// 形成一个chunk，输出一个bundle文件。</span><br>          <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;./src/add.js&#x27;</span><br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-output"><a href="#6-2-output" class="headerlink" title="6.2 output"></a>6.2 output</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">output: &#123;<br>    <span class="hljs-comment">// 文件名称（指定名称+目录）</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/[name].js&#x27;</span>,<br>    <span class="hljs-comment">// 输出文件目录（将来所有资源输出的公共目录）</span><br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-comment">// 所有资源引入公共路径前缀 --&gt; &#x27;imgs/a.jpg&#x27; --&gt; &#x27;/imgs/a.jpg&#x27;</span><br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;js/[name]_chunk.js&#x27;</span>, <span class="hljs-comment">// 非入口chunk的名称</span><br>    <span class="hljs-comment">// library: &#x27;[name]&#x27;, // 整个库向外暴露的变量名</span><br>    <span class="hljs-comment">// libraryTarget: &#x27;window&#x27; // 变量名添加到哪个上 browser</span><br>    <span class="hljs-comment">// libraryTarget: &#x27;global&#x27; // 变量名添加到哪个上 node</span><br>    <span class="hljs-comment">// libraryTarget: &#x27;commonjs&#x27;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="6-3-module"><a href="#6-3-module" class="headerlink" title="6.3 module"></a>6.3 module</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// loader的配置</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// 多个loader用use</span><br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-comment">// 排除node_modules下的js文件</span><br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// 只检查 src 下的js文件</span><br>        include: resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>        <span class="hljs-comment">// 优先执行</span><br>        <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>        <span class="hljs-comment">// 延后执行</span><br>        <span class="hljs-comment">// enforce: &#x27;post&#x27;,</span><br>        <span class="hljs-comment">// 单个loader用loader</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;&#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 以下配置只会生效一个</span><br>        <span class="hljs-attr">oneOf</span>: []<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="6-4-resolve"><a href="#6-4-resolve" class="headerlink" title="6.4 resolve"></a>6.4 resolve</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解析模块的规则</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-comment">// 配置解析模块路径别名: 优点简写路径 缺点路径没有提示</span><br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-attr">$css</span>: resolve(__dirname, <span class="hljs-string">&#x27;src/css&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-comment">// 配置省略文件路径的后缀名</span><br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.css&#x27;</span>],<br>    <span class="hljs-comment">// 告诉 webpack 解析模块是去找哪个目录</span><br>    <span class="hljs-attr">modules</span>: [resolve(__dirname, <span class="hljs-string">&#x27;../../node_modules&#x27;</span>), <span class="hljs-string">&#x27;node_modules&#x27;</span>]<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="6-5-dev-server"><a href="#6-5-dev-server" class="headerlink" title="6.5 dev server"></a>6.5 dev server</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">devServer: &#123;<br>    <span class="hljs-comment">// 运行代码的目录</span><br>    <span class="hljs-attr">contentBase</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-comment">// 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload</span><br>    <span class="hljs-attr">watchContentBase</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">watchOptions</span>: &#123;<br>      <span class="hljs-comment">// 忽略文件</span><br>      <span class="hljs-attr">ignored</span>: <span class="hljs-regexp">/node_modules/</span><br>    &#125;,<br>    <span class="hljs-comment">// 启动gzip压缩</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span>,<br>    <span class="hljs-comment">// 域名</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 开启HMR功能</span><br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不要显示启动服务器日志信息</span><br>    <span class="hljs-attr">clientLogLevel</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>    <span class="hljs-comment">// 除了一些基本启动信息以外，其他内容都不要显示</span><br>    <span class="hljs-attr">quiet</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 如果出错了，不要全屏提示~</span><br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 服务器代理 --&gt; 解决开发环境跨域问题</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-comment">// 一旦devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器(3000)</span><br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>        <span class="hljs-comment">// 发送请求时，请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api）</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="6-6-optimization"><a href="#6-6-optimization" class="headerlink" title="6.6 optimization"></a>6.6 optimization</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript">optimization: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>      <span class="hljs-comment">// 默认值，可以不写~</span><br>      <span class="hljs-comment">/* minSize: 30 * 1024, // 分割的chunk最小为30kb</span><br><span class="hljs-comment">      maxSiza: 0, // 最大没有限制</span><br><span class="hljs-comment">      minChunks: 1, // 要提取的chunk最少被引用1次</span><br><span class="hljs-comment">      maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量</span><br><span class="hljs-comment">      maxInitialRequests: 3, // 入口js文件最大并行请求数量</span><br><span class="hljs-comment">      automaticNameDelimiter: &#x27;~&#x27;, // 名称连接符</span><br><span class="hljs-comment">      name: true, // 可以使用命名规则</span><br><span class="hljs-comment">      cacheGroups: &#123;</span><br><span class="hljs-comment">        // 分割chunk的组</span><br><span class="hljs-comment">        // node_modules文件会被打包到 vendors 组的chunk中。--&gt; vendors~xxx.js</span><br><span class="hljs-comment">        // 满足上面的公共规则，如：大小超过30kb，至少被引用一次。</span><br><span class="hljs-comment">        vendors: &#123;</span><br><span class="hljs-comment">          test: /[\\/]node_modules[\\/]/,</span><br><span class="hljs-comment">          // 优先级</span><br><span class="hljs-comment">          priority: -10</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        default: &#123;</span><br><span class="hljs-comment">          // 要提取的chunk最少被引用2次</span><br><span class="hljs-comment">          minChunks: 2,</span><br><span class="hljs-comment">          // 优先级</span><br><span class="hljs-comment">          priority: -20,</span><br><span class="hljs-comment">          // 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span><br><span class="hljs-comment">          reuseExistingChunk: true</span><br><span class="hljs-comment">        &#125; </span><br><span class="hljs-comment">      &#125;*/</span><br>    &#125;,<br>    <span class="hljs-comment">// 将当前模块的记录其他模块的hash单独打包为一个文件 runtime</span><br>    <span class="hljs-comment">// 解决：修改a文件导致b文件的contenthash变化</span><br>    <span class="hljs-attr">runtimeChunk</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-function"><span class="hljs-params">entrypoint</span> =&gt;</span> <span class="hljs-string">`runtime-<span class="hljs-subst">$&#123;entrypoint.name&#125;</span>`</span><br>    &#125;,<br>    <span class="hljs-attr">minimizer</span>: [<br>      <span class="hljs-comment">// 配置生产环境的压缩方案：js和css</span><br>      <span class="hljs-keyword">new</span> TerserWebpackPlugin(&#123;<br>        <span class="hljs-comment">// 开启缓存</span><br>        <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 开启多进程打包</span><br>        <span class="hljs-attr">parallel</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 启动source-map</span><br>        <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span><br>      &#125;)<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack（一）</title>
    <link href="/2021/11/10/webpack%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/11/10/webpack%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-webpack简介"><a href="#第一章-webpack简介" class="headerlink" title="第一章 webpack简介"></a>第一章 webpack简介</h1><h2 id="1-1-webpack是什么"><a href="#1-1-webpack是什么" class="headerlink" title="1.1 webpack是什么"></a>1.1 webpack是什么</h2><p>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。 </p><p>在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。 </p><p>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)，也就是代码块chunk打包成bundle的过程。</p><h2 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1.2 webpack 五个核心概念"></a>1.2 webpack 五个核心概念</h2><h5 id="1-2-1-Entry"><a href="#1-2-1-Entry" class="headerlink" title="1.2.1 Entry"></a>1.2.1 Entry</h5><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h5 id="1-2-2-Output"><a href="#1-2-2-Output" class="headerlink" title="1.2.2 Output"></a>1.2.2 Output</h5><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。 </p><h5 id="1-2-3-Loader"><a href="#1-2-3-Loader" class="headerlink" title="1.2.3 Loader"></a>1.2.3 Loader</h5><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件 (webpack 自身只理解 JavaScript) </p><h5 id="1-2-4-Plugins"><a href="#1-2-4-Plugins" class="headerlink" title="1.2.4 Plugins"></a>1.2.4 Plugins</h5><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</p><h5 id="1-2-5-Mode"><a href="#1-2-5-Mode" class="headerlink" title="1.2.5 Mode"></a>1.2.5 Mode</h5><p><img src="/pic/webpack/1.png"></p><h1 id="第二章-webpack的初体验"><a href="#第二章-webpack的初体验" class="headerlink" title="第二章 webpack的初体验"></a>第二章 webpack的初体验</h1><h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><ol><li><p>初始化 package.json </p><p>输入指令: npm init</p></li><li><p>下载并安装 webpack </p><p>输入指令: </p><p>npm install webpack webpack-cli -g </p><p>npm install webpack webpack-cli -D（npm  i  xxxx –save-dev 是把依赖写入进<strong>devDependencies</strong>对象里面）</p></li></ol><h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><ol><li><p>创建文件 </p></li><li><p>运行指令 </p><p>开发环境指令：webpack src/js/index.js -o build/js/built.js –mode=development </p><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法。 </p><p>生产环境指令：webpack src/js/index.js -o build/js/built.js –mode=production </p><p>功能：在开发配置功能上多一个功能，压缩代码。 </p></li><li><p>结论</p><p>webpack 能够编译打包 js 和 json 文件。 </p><p>能将 es6 的模块化语法转换成浏览器能识别的语法。 </p><p>能压缩代码。 </p></li><li><p>问题</p><p>不能编译打包 css、img 等文件。 </p><p>不能将 js 的 es6 基本语法转化为 es5 以下语法。</p></li></ol><h1 id="第三章-webpack开发环境的基本配置"><a href="#第三章-webpack开发环境的基本配置" class="headerlink" title="第三章 webpack开发环境的基本配置"></a>第三章 webpack开发环境的基本配置</h1><h2 id="3-1-创建配置文件"><a href="#3-1-创建配置文件" class="headerlink" title="3.1 创建配置文件"></a>3.1 创建配置文件</h2><ol><li>创建文件 <strong>webpack.config.js</strong></li><li>配置内容如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>); <span class="hljs-comment">// node 内置核心模块，用来处理路径问题。</span><br><span class="hljs-built_in">module</span>.exports = &#123; <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-comment">// 入口文件</span><br>                  <span class="hljs-attr">output</span>: &#123; <span class="hljs-comment">// 输出配置 </span><br>                    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;./built.js&#x27;</span>, <span class="hljs-comment">// 输出文件名 </span><br>                  <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>) <span class="hljs-comment">// 输出文件路径配置 </span><br>                  &#125;,<br>                  <span class="hljs-attr">module</span>:&#123; <span class="hljs-comment">//loader的配置</span><br>                      <span class="hljs-attr">rules</span>:[<br>                          <span class="hljs-comment">//详细loader配置</span><br>                      ]<br>                  &#125;,<br>                  <span class="hljs-attr">plugins</span>:[ <span class="hljs-comment">//plugins的配置</span><br>                      <span class="hljs-comment">//详细plugins的配置</span><br>                  ],<br>                  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">// 开发模式</span><br>  <span class="hljs-comment">// mode: &#x27;production&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>运行指令: webpack</li></ol><h2 id="3-2-打包样式资源"><a href="#3-2-打包样式资源" class="headerlink" title="3.2 打包样式资源"></a>3.2 打包样式资源</h2><ol><li><p>创建文件<strong>webpack.config.js</strong></p></li><li><p>下载安装 loader 包 </p><p>npm i <strong>css-loader style-loader less-loader less</strong> -D </p></li><li><p>修改配置文件</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// loader的配置</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 详细loader配置</span><br>      <span class="hljs-comment">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class="hljs-comment">// 匹配哪些文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// 使用哪些loader进行处理</span><br>        use: [<br>          <span class="hljs-comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br>          <span class="hljs-comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span><br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span><br>        ]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将less文件编译成css文件</span><br>          <span class="hljs-comment">// 需要下载 less-loader和less</span><br>          <span class="hljs-string">&#x27;less-loader&#x27;</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="3-3-打包HTML资源"><a href="#3-3-打包HTML资源" class="headerlink" title="3.3 打包HTML资源"></a>3.3 打包HTML资源</h2><ol><li><p>创建文件<strong>webpack.config.js</strong></p></li><li><p>下载安装 plugin 包 </p><p>npm install –save-dev html-webpack-plugin</p></li><li><p>修改配置文件</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">//需要手动引入</span><br>plugins: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-comment">// html-webpack-plugin</span><br>    <span class="hljs-comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class="hljs-comment">// 需求：需要有结构的HTML文件</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>    &#125;)<br>  ],<br></code></pre></td></tr></table></figure><h2 id="3-4-打包图片资源"><a href="#3-4-打包图片资源" class="headerlink" title="3.4 打包图片资源"></a>3.4 打包图片资源</h2><ol><li><p>创建文件<strong>webpack.config.js</strong></p></li><li><p>下载安装 loader 包 </p><p>npm install –save-dev html-loader url-loader file-loader</p></li><li><p>修改配置文件</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-comment">// 要使用多个loader处理用use</span><br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 问题：默认处理不了html中img图片</span><br>        <span class="hljs-comment">// 处理图片资源</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        <span class="hljs-comment">// 使用一个loader</span><br>        <span class="hljs-comment">// 下载 url-loader file-loader</span><br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 图片大小小于8kb，就会被base64处理</span><br>          <span class="hljs-comment">// 优点: 减少请求数量（减轻服务器压力）</span><br>          <span class="hljs-comment">// 缺点：图片体积会更大（文件请求速度更慢）</span><br>          <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br>          <span class="hljs-comment">// 解析时会出问题：[object Module]</span><br>          <span class="hljs-comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-comment">// 给图片进行重命名</span><br>          <span class="hljs-comment">// [hash:10]取图片的hash的前10位</span><br>          <span class="hljs-comment">// [ext]取文件原来扩展名</span><br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>        <span class="hljs-comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>    &#125;)<br>  ],<br></code></pre></td></tr></table></figure><h2 id="3-5-打包其他资源"><a href="#3-5-打包其他资源" class="headerlink" title="3.5 打包其他资源"></a>3.5 打包其他资源</h2><p>修改配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除css/js/html资源</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(css|js|html|less)$/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>    &#125;)<br>  ],<br></code></pre></td></tr></table></figure><h2 id="3-6-devserver"><a href="#3-6-devserver" class="headerlink" title="3.6 devserver"></a>3.6 devserver</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</span><br><span class="hljs-comment">// 特点：只会在内存中编译打包，不会有任何输出</span><br><span class="hljs-comment">// 下载安装：npm i webpack-dev-server -D </span><br><span class="hljs-comment">// 启动devServer指令为：npx webpack-dev-server(webpack指令为npx webpack serve)</span><br><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-comment">// 项目构建后路径(contentBase已启用，改为static)</span><br>  <span class="hljs-attr">contentBase</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  <span class="hljs-comment">// 启动gzip压缩</span><br>  <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 端口号</span><br>  <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>  <span class="hljs-comment">// 自动打开浏览器</span><br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-开发环境配置"><a href="#3-7-开发环境配置" class="headerlink" title="3.7 开发环境配置"></a>3.7 开发环境配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  开发环境配置：能让代码运行</span><br><span class="hljs-comment">    运行项目指令：</span><br><span class="hljs-comment">      webpack 会将打包结果输出出去</span><br><span class="hljs-comment">      npx webpack-dev-server 只会在内存中编译打包，没有输出</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// loader的配置</span><br>      &#123;<br>        <span class="hljs-comment">// 处理less资源</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理css资源</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理图片资源</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-comment">// 关闭es6模块化</span><br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;imgs&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理html中img资源</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理其他资源</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>    &#125;)<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">static</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="第四章-webpack生产环境的基本配置"><a href="#第四章-webpack生产环境的基本配置" class="headerlink" title="第四章 webpack生产环境的基本配置"></a>第四章 webpack生产环境的基本配置</h1><h2 id="4-1-提取css成单独文件"><a href="#4-1-提取css成单独文件" class="headerlink" title="4.1 提取css成单独文件"></a>4.1 提取css成单独文件</h2><p>下载安装 plugin 包 </p><p>npm i mini-css-extract-plugin -D </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          <span class="hljs-comment">// 创建style标签，将样式放入</span><br>          <span class="hljs-comment">// &#x27;style-loader&#x27;, </span><br>          <span class="hljs-comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-comment">// 将css文件整合到js文件中</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      <span class="hljs-comment">// 对输出的css文件进行重命名</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;css/built.css&#x27;</span><br>    &#125;)<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-2-css兼容性处理"><a href="#4-2-css兼容性处理" class="headerlink" title="4.2 css兼容性处理"></a>4.2 css兼容性处理</h2><p>下载安装 loader 包 </p><p>npm install –save-dev postcss-loader postcss-preset-env</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置nodejs环境变量(默认生产环境production)</span><br><span class="hljs-comment">// process.env.NODE_ENV = &#x27;development&#x27;;</span><br>...<br><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">            css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式(要求修改)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            &quot;browserslist&quot;: &#123;</span><br><span class="hljs-comment">              // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span><br><span class="hljs-comment">              &quot;development&quot;: [</span><br><span class="hljs-comment">                &quot;last 1 chrome version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 firefox version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 safari version&quot;</span><br><span class="hljs-comment">              ],</span><br><span class="hljs-comment">              // 生产环境：默认是看生产环境</span><br><span class="hljs-comment">              &quot;production&quot;: [</span><br><span class="hljs-comment">                &quot;&gt;0.2%&quot;,</span><br><span class="hljs-comment">                &quot;not dead&quot;,</span><br><span class="hljs-comment">                &quot;not op_mini all&quot;</span><br><span class="hljs-comment">              ]</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          */</span><br>          <span class="hljs-comment">// 使用loader的默认配置</span><br>          <span class="hljs-comment">// &#x27;postcss-loader&#x27;,</span><br>          <span class="hljs-comment">// 修改loader的配置</span><br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">ident</span>: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>              <span class="hljs-attr">plugins</span>: <span class="hljs-function">() =&gt;</span> [<br>                <span class="hljs-comment">// postcss的插件</span><br>                <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)()<br>              ]<br>            &#125;<br>          &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="4-3-压缩css"><a href="#4-3-压缩css" class="headerlink" title="4.3 压缩css"></a>4.3 压缩css</h2><p>下载安装 plugin 包 </p><p>npm install –save-dev optimize-css-assets-webpack-plugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)<br>...<br><span class="hljs-comment">// 压缩css</span><br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin()<br></code></pre></td></tr></table></figure><h2 id="4-4-js语法检查"><a href="#4-4-js语法检查" class="headerlink" title="4.4 js语法检查"></a>4.4 js语法检查</h2><p>下载安装包 </p><p>npm install –save-dev eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        语法检查： eslint-loader  eslint</span><br><span class="hljs-comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="hljs-comment">          设置检查规则：</span><br><span class="hljs-comment">            package.json中eslintConfig中设置~</span><br><span class="hljs-comment">              &quot;eslintConfig&quot;: &#123;</span><br><span class="hljs-comment">                &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="hljs-comment">              &#125;</span><br><span class="hljs-comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 自动修复eslint的错误</span><br>          <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="4-5-js兼容性处理"><a href="#4-5-js兼容性处理" class="headerlink" title="4.5 js兼容性处理"></a>4.5 js兼容性处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        js兼容性处理：babel-loader @babel/core</span><br><span class="hljs-comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span><br><span class="hljs-comment">            问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="hljs-comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill  </span><br><span class="hljs-comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class="hljs-comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 预设：指示babel做怎么样的兼容性处理</span><br>          <span class="hljs-attr">presets</span>: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                <span class="hljs-comment">// 按需加载</span><br>                <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                <span class="hljs-comment">// 指定core-js版本</span><br>                <span class="hljs-attr">corejs</span>: &#123;<br>                  <span class="hljs-attr">version</span>: <span class="hljs-number">3</span><br>                &#125;,<br>                <span class="hljs-comment">// 指定兼容性做到哪个版本浏览器</span><br>                <span class="hljs-attr">targets</span>: &#123;<br>                  <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  <span class="hljs-attr">ie</span>: <span class="hljs-string">&#x27;9&#x27;</span>,<br>                  <span class="hljs-attr">safari</span>: <span class="hljs-string">&#x27;10&#x27;</span>,<br>                  <span class="hljs-attr">edge</span>: <span class="hljs-string">&#x27;17&#x27;</span><br>                &#125;<br>              &#125;<br>            ]<br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-js压缩与html压缩"><a href="#4-6-js压缩与html压缩" class="headerlink" title="4.6 js压缩与html压缩"></a>4.6 js压缩与html压缩</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      <span class="hljs-comment">// 压缩html代码</span><br>      <span class="hljs-attr">minify</span>: &#123;<br>        <span class="hljs-comment">// 移除空格</span><br>        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 移除注释</span><br>        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;)<br>  ],<br>  <span class="hljs-comment">// 生产环境下会自动压缩js代码</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-7-生产环境配置"><a href="#4-7-生产环境配置" class="headerlink" title="4.7 生产环境配置"></a>4.7 生产环境配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br>process.env.NODE_ENV = <span class="hljs-string">&#x27;production&#x27;</span>;<br><br><span class="hljs-comment">// 复用loader</span><br><span class="hljs-keyword">const</span> commonCssLoader = [<br>  MiniCssExtractPlugin.loader,<br>  <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>  &#123;<br>    <span class="hljs-comment">// 还需要在package.json中定义browserslist</span><br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">ident</span>: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>      <span class="hljs-attr">plugins</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)()]<br>    &#125;<br>  &#125;<br>];<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [...commonCssLoader]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [...commonCssLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>      &#125;,<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        正常来讲，一个文件只能被一个loader处理。</span><br><span class="hljs-comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="hljs-comment">          先执行eslint 在执行babel</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-comment">// 在package.json中eslintConfig --&gt; airbnb</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// 优先执行</span><br>        enforce: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">presets</span>: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                <span class="hljs-attr">corejs</span>: &#123;<span class="hljs-attr">version</span>: <span class="hljs-number">3</span>&#125;,<br>                <span class="hljs-attr">targets</span>: &#123;<br>                  <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;50&#x27;</span><br>                &#125;<br>              &#125;<br>            ]<br>          ]<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;css/built.css&#x27;</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      <span class="hljs-attr">minify</span>: &#123;<br>        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;)<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React扩展</title>
    <link href="/2021/11/07/React%E6%89%A9%E5%B1%95/"/>
    <url>/2021/11/07/React%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h2><h3 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pf">(<span class="hljs-number">1</span>). <span class="hljs-built_in">set</span>State(<span class="hljs-keyword">state</span>Change, [callback])------对象式的<span class="hljs-built_in">set</span>State<br>            <span class="hljs-number">1</span>.<span class="hljs-keyword">state</span>Change为状态改变对象(该对象可以体现出状态的更改)<br>            <span class="hljs-number">2</span>.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用<br><br>(<span class="hljs-number">2</span>). <span class="hljs-built_in">set</span>State(updater, [callback])------函数式的<span class="hljs-built_in">set</span>State<br>            <span class="hljs-number">1</span>.updater为返回<span class="hljs-keyword">state</span>Change对象的函数。<br>            <span class="hljs-number">2</span>.updater可以接收到<span class="hljs-keyword">state</span>和props。<br>            <span class="hljs-number">4</span>.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。<br>总结:<br><span class="hljs-number">1</span>.对象式的<span class="hljs-built_in">set</span>State是函数式的<span class="hljs-built_in">set</span>State的简写方式(语法糖)<br><span class="hljs-number">2</span>.使用原则：<br>(<span class="hljs-number">1</span>).如果新状态不依赖于原状态 ===&gt; 使用对象方式<br>(<span class="hljs-number">2</span>).如果新状态依赖于原状态 ===&gt; 使用函数方式<br>(<span class="hljs-number">3</span>).如果需要在<span class="hljs-built_in">set</span>State()执行后获取最新的状态数据, <br>要在第二个callback函数中读取<br></code></pre></td></tr></table></figure><h2 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h2><h3 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">yarn add lazyLoad<br><span class="hljs-comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span><br><span class="hljs-keyword">const</span> Login = lazy(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/Login&#x27;</span>))<br><br><span class="hljs-comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span><br>&lt;Suspense fallback=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>loading.....<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>&#125;&gt;<br>       <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/xxx&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Xxxx&#125;/</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br>   &lt;/Suspense&gt;<br></code></pre></td></tr></table></figure><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h4 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">(<span class="hljs-number">1</span>). Hook是React <span class="hljs-number">16.8</span>.<span class="hljs-number">0</span>版本增加的新特性/新语法<br>(<span class="hljs-number">2</span>). 可以让你在函数组件中使用 <span class="hljs-keyword">state</span> 以及其他的 React 特性<br></code></pre></td></tr></table></figure><h4 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). State Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">State()</span><br>(<span class="hljs-number">2</span>). Effect Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">Effect()</span><br>(<span class="hljs-number">3</span>). Ref Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">Ref()</span><br></code></pre></td></tr></table></figure><h4 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作<br>(<span class="hljs-number">2</span>). 语法: const <span class="hljs-literal">[<span class="hljs-identifier">xxx</span>, <span class="hljs-identifier">setXxx</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">State(<span class="hljs-params">initValue</span>)</span>  <br>(<span class="hljs-number">3</span>). use<span class="hljs-constructor">State()</span>说明:<br>        参数: 第一次初始化指定的值在内部作缓存<br>        返回值: 包含<span class="hljs-number">2</span>个元素的数组, 第<span class="hljs-number">1</span>个为内部当前状态值, 第<span class="hljs-number">2</span>个为更新状态值的函数<br>(<span class="hljs-number">4</span>). set<span class="hljs-constructor">Xxx()</span><span class="hljs-number">2</span>种写法:<br>        set<span class="hljs-constructor">Xxx(<span class="hljs-params">newValue</span>)</span>: 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值<br>        set<span class="hljs-constructor">Xxx(<span class="hljs-params">value</span> =&gt; <span class="hljs-params">newValue</span>)</span>: 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值<br></code></pre></td></tr></table></figure><h4 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(<span class="hljs-number">1</span>). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)<br>(<span class="hljs-number">2</span>). React中的副作用操作:<br>        发ajax请求数据获取<br>        设置订阅 / 启动定时器<br>        手动更改真实DOM<br>(<span class="hljs-number">3</span>). 语法和说明: <br>        useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <br>          <span class="hljs-comment">// 在此可以执行任何带副作用操作</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-comment">// 在组件卸载前执行</span><br>            <span class="hljs-comment">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br>          &#125;<br>        &#125;, [stateValue]) <span class="hljs-comment">// 如果指定的是[], 回调函数只会在第一次render()后执行</span><br>    <br>(<span class="hljs-number">4</span>). 可以把 useEffect Hook 看做如下三个函数的组合<br>        componentDidMount()<br>        componentDidUpdate()<br>    componentWillUnmount() <br></code></pre></td></tr></table></figure><h4 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据<br>(<span class="hljs-number">2</span>). 语法: const refContainer = use<span class="hljs-constructor">Ref()</span><br>(<span class="hljs-number">3</span>). 作用:保存标签对象,功能与<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>create<span class="hljs-constructor">Ref()</span>一样<br></code></pre></td></tr></table></figure><h2 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Fragment&gt;</span><span class="hljs-section">&lt;Fragment&gt;</span><br><span class="hljs-section">&lt;&gt;</span><span class="hljs-section">&lt;/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><h2 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>) 创建Context容器对象：<br><span class="hljs-keyword">const</span> XxxContext = React.createContext()  <br><br><span class="hljs-number">2</span>) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：<br>&lt;xxxContext.Provider value=&#123;数据&#125;&gt;<br>子组件<br>    &lt;/xxxContext.Provider&gt;<br>    <br><span class="hljs-number">3</span>) 后代组件读取数据：<br><br><span class="hljs-comment">//第一种方式:仅适用于类组件 </span><br>  <span class="hljs-keyword">static</span> contextType = xxxContext  <span class="hljs-comment">// 声明接收context</span><br>  <span class="hljs-built_in">this</span>.context <span class="hljs-comment">// 读取context中的value数据</span><br>  <br><span class="hljs-comment">//第二种方式: 函数组件与类组件都可以</span><br>  &lt;xxxContext.Consumer&gt;<br>    &#123;<br>      <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> ( <span class="hljs-comment">// value就是context中的value数据</span><br>        要显示的内容<br>      )<br>    &#125;<br>  &lt;/xxxContext.Consumer&gt;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">在应用开发中一般不用<span class="hljs-built_in">context</span>, 一般都用它的封装react插件<br></code></pre></td></tr></table></figure><h2 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h2><h3 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h3><blockquote><ol><li>只要执行setState(),即使不改变状态数据, 组件也会重新render() ==&gt; 效率低</li><li>只当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</li></ol></blockquote><h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><blockquote><p>只有当组件的state或props数据发生改变时才重新render()</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>Component中的shouldComponentUpdate()总是返回true</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pf">办法<span class="hljs-number">1</span>: <br>重写shouldComponentUpdate()方法<br>比较新旧<span class="hljs-keyword">state</span>或props数据, 如果有变化才返回true, 如果没有返回false<br>办法<span class="hljs-number">2</span>:  <br>使用PureComponent<br>PureComponent重写了shouldComponentUpdate(), 只有<span class="hljs-keyword">state</span>或props数据有变化才返回true<br>注意: <br>只是进行<span class="hljs-keyword">state</span>和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  <br>不要直接修改<span class="hljs-keyword">state</span>数据, 而是要产生新数据<br>项目中一般使用PureComponent来优化<br></code></pre></td></tr></table></figure><h2 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h2><h3 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">Vue中: <br>使用slot技术, 也就是通过组件标签体传入结构  <span class="hljs-tag">&lt;<span class="hljs-name">A</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">B</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">A</span>&gt;</span><br>React中:<br>使用children props: 通过组件标签体传入结构<br>使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性<br></code></pre></td></tr></table></figure><h3 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">A</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">B</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">B</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">A</span>&gt;</span></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;this.props.children&#125;</span><span class="xml"></span><br><span class="xml">问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 </span><br></code></pre></td></tr></table></figure><h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;A render=&#123;(<span class="hljs-keyword">data</span>) =&gt; &lt;C <span class="hljs-keyword">data</span>=&#123;<span class="hljs-keyword">data</span>&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;<br>A组件: &#123;<span class="hljs-keyword">this</span>.props.render(内部state数据)&#125;<br>C组件: 读取A组件传入的数据显示 &#123;<span class="hljs-keyword">this</span>.props.<span class="hljs-keyword">data</span>&#125; <br></code></pre></td></tr></table></figure><h2 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h2><h4 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h4><p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><p>getDerivedStateFromError配合componentDidCatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-comment">// 在render之前触发</span><br>    <span class="hljs-comment">// 返回新的state</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, info</span>)</span> &#123;<br>    <span class="hljs-comment">// 统计页面的错误。发送请求发送到后台去</span><br>    <span class="hljs-built_in">console</span>.log(error, info);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h2><h4 id="组件间的关系："><a href="#组件间的关系：" class="headerlink" title="组件间的关系："></a>组件间的关系：</h4><ul><li>父子组件</li><li>兄弟组件（非嵌套组件）</li><li>祖孙组件（跨级组件）</li></ul><h4 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">1.</span><span class="hljs-built_in">props</span>：<br>(<span class="hljs-number">1</span>).children <span class="hljs-built_in">props</span><br>(<span class="hljs-number">2</span>).render <span class="hljs-built_in">props</span><br><span class="hljs-number">2</span>.消息订阅-发布：<br>pubs-sub、event等等<br><span class="hljs-number">3</span>.集中式管理：<br>redux、dva等等<br><span class="hljs-number">4.</span>conText:<br>生产者-消费者模式<br></code></pre></td></tr></table></figure><h4 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h4><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl">父子组件：<span class="hljs-variable">props</span><br>兄弟组件：消息订阅-发布、集中式管理<br>祖孙组件(跨级组件)：消息订阅-发布、集中式管理、<span class="hljs-function"><span class="hljs-title">conText</span>(开发用的少，封装插件用的多)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（七）</title>
    <link href="/2021/11/05/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2021/11/05/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第七章-Redux"><a href="#第七章-Redux" class="headerlink" title="第七章 Redux"></a>第七章 Redux</h1><h2 id="7-1redux理解"><a href="#7-1redux理解" class="headerlink" title="7.1redux理解"></a>7.1redux理解</h2><h5 id="7-1-1学习文档"><a href="#7-1-1学习文档" class="headerlink" title="7.1.1学习文档"></a>7.1.1学习文档</h5><ol><li>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></li><li>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></li><li>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></li></ol><h5 id="7-1-2redux是什么"><a href="#7-1-2redux是什么" class="headerlink" title="7.1.2redux是什么"></a>7.1.2redux是什么</h5><ol><li>redux是一个专门用于做状态管理的JS库(不是react插件库)。</li><li>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</li><li>作用: 集中式管理react应用中多个组件共享的状态。</li></ol><h5 id="7-1-3-什么情况下需要使用redux"><a href="#7-1-3-什么情况下需要使用redux" class="headerlink" title="7.1.3. 什么情况下需要使用redux"></a>7.1.3. 什么情况下需要使用redux</h5><ol><li>某个组件的状态，需要让其他组件可以随时拿到（共享）。</li><li>一个组件需要改变另一个组件的状态（通信）。</li><li>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</li></ol><h5 id="7-1-4redux工作流程"><a href="#7-1-4redux工作流程" class="headerlink" title="7.1.4redux工作流程"></a>7.1.4redux工作流程</h5><p><img src="/pic/React/3.png"></p><h2 id="7-2redux的三个核心概念"><a href="#7-2redux的三个核心概念" class="headerlink" title="7.2redux的三个核心概念"></a>7.2redux的三个核心概念</h2><h5 id="7-2-1action"><a href="#7-2-1action" class="headerlink" title="7.2.1action"></a>7.2.1action</h5><ol><li>动作的对象</li><li>包含2个属性</li></ol><ul><li>type：标识属性, 值为字符串, 唯一, 必要属性</li><li>data：数据属性, 值类型任意, 可选属性</li></ul><ol start="3"><li>例子：{ type: ‘ADD_STUDENT’,data:{name: ‘tom’,age:18} }</li></ol><h5 id="7-2-2reducer"><a href="#7-2-2reducer" class="headerlink" title="7.2.2reducer"></a>7.2.2reducer</h5><ol><li>用于初始化状态、加工状态。</li><li>加工时，根据旧的state和action， 产生新的state的纯函数。</li></ol><h5 id="7-2-3store"><a href="#7-2-3store" class="headerlink" title="7.2.3store"></a>7.2.3store</h5><ol><li>将state、action、reducer联系在一起的对象</li></ol><ol start="2"><li><p>如何得到此对象?</p><p>1)import {createStore} from ‘redux’<br>2)import reducer from ‘./reducers’<br>3)const store = createStore(reducer)</p></li><li><p>此对象的功能?</p><p>1)getState(): 得到state</p><p>2)dispatch(action): 分发action, 触发reducer调用, 产生新的state<br>3)subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</p></li></ol><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>.求和案例_redux精简版<br>(<span class="hljs-number">1</span>).去除Count组件自身的状态<br>(<span class="hljs-number">2</span>).src下建立:<br>-redux<br>-<span class="hljs-keyword">store</span>.js<br>-count_reducer.js<br><br>(<span class="hljs-number">3</span>).<span class="hljs-keyword">store</span>.js：<br><span class="hljs-number">1</span>).引入redux中的createStore函数，创建一个<span class="hljs-keyword">store</span><br><span class="hljs-number">2</span>).createStore调用时要传入一个为其服务的reducer<br><span class="hljs-number">3</span>).记得暴露<span class="hljs-keyword">store</span>对象<br><br>(<span class="hljs-number">4</span>).count_reducer.js：<br><span class="hljs-number">1</span>).reducer的本质是一个函数，接收：preState<span class="hljs-punctuation">,</span>action，返回加工后的状态<br><span class="hljs-number">2</span>).reducer有两个作用：初始化状态，加工状态<br><span class="hljs-number">3</span>).reducer被第一次调用时，是<span class="hljs-keyword">store</span>自动触发的，<br>传递的preState是undefined<span class="hljs-punctuation">,</span><br>传递的action是:&#123;<span class="hljs-keyword">type</span>:&#x27;@<span class="hljs-title">@REDUX</span>/INIT_a.<span class="hljs-number">2</span>.b.<span class="hljs-number">4</span>&#125;<br><br>(<span class="hljs-number">5</span>).在index.js中监测<span class="hljs-keyword">store</span>中状态的改变，一旦发生改变重新渲染&lt;App/&gt;<br>备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2</span>.求和案例_redux完整版<br>新增文件：<br><span class="hljs-number">1</span>)<span class="hljs-selector-class">.count_action</span><span class="hljs-selector-class">.js</span> 专门用于创建action对象<br><span class="hljs-number">2</span>)<span class="hljs-selector-class">.constant</span><span class="hljs-selector-class">.js</span> 放置容易写错的type值<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-number">3.</span>求和案例_redux异步<span class="hljs-keyword">action</span>版<br>//同步<span class="hljs-keyword">action</span>，就是指<span class="hljs-keyword">action</span>的值为Object类型的一般对象<br>//异步<span class="hljs-keyword">action</span>，就是指<span class="hljs-keyword">action</span>的值为函数,异步<span class="hljs-keyword">action</span>中一般都会调用同步<span class="hljs-keyword">action</span>，异步<span class="hljs-keyword">action</span>不是必须要用的。<br>(<span class="hljs-number">1</span>).明确：延迟的动作不想交给组件自身，想交给<span class="hljs-keyword">action</span><br>(<span class="hljs-number">2</span>).何时需要异步<span class="hljs-keyword">action</span>：想要对状态进行操作，但是具体的数据靠异步任务返回。<br>(<span class="hljs-number">3</span>).具体编码：<br> <span class="hljs-number">1</span>).yarn add redux-thunk，并配置在store中<br> <span class="hljs-number">2</span>).创建<span class="hljs-keyword">action</span>的函数不再返回一般对象，而是一个函数，该函数中写异步任务。<br> <span class="hljs-number">3</span>).异步任务有结果后，分发一个同步的<span class="hljs-keyword">action</span>去真正操作数据。<br>(<span class="hljs-number">4</span>).备注：异步<span class="hljs-keyword">action</span>不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步<span class="hljs-keyword">action</span>。<br></code></pre></td></tr></table></figure><p><img src="/pic/React/4.png" alt="react-redux模型图"></p><p>react-redux是Facebook开发的，是React的插件库，能更方便地在React中使用Redux</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">4</span>.求和案例<span class="hljs-selector-tag">_react-redux</span>基本使用<br>(<span class="hljs-number">1</span>).明确两个概念：<br><span class="hljs-selector-tag">1</span>)<span class="hljs-selector-class">.UI</span>组件:不能使用任何<span class="hljs-selector-tag">redux</span>的<span class="hljs-selector-tag">api</span>，只负责页面的呈现、交互等。<br><span class="hljs-selector-tag">2</span>).容器组件：负责和<span class="hljs-selector-tag">redux</span>通信，将结果交给<span class="hljs-selector-tag">UI</span>组件。<br>(<span class="hljs-number">2</span>).如何创建一个容器组件————靠<span class="hljs-selector-tag">react-redux</span> 的 <span class="hljs-selector-tag">connect</span>函数<br><span class="hljs-selector-tag">connect</span>(mapStateToProps,mapDispatchToProps)(UI组件)<br><span class="hljs-selector-tag">-mapStateToProps</span>:映射状态，返回值是一个对象<br><span class="hljs-selector-tag">-mapDispatchToProps</span>:映射操作状态的方法，返回值是一个对象<br>(<span class="hljs-number">3</span>).备注<span class="hljs-selector-tag">1</span>：容器组件中的<span class="hljs-selector-tag">store</span>是靠<span class="hljs-selector-tag">props</span>传进去的，而不是在容器组件中直接引入<br>(<span class="hljs-number">4</span>).备注<span class="hljs-selector-tag">2</span>：<span class="hljs-selector-tag">mapDispatchToProps</span>，也可以是一个对象<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">5.求和案例_react-redux优化<br><span class="hljs-params">(1)</span>.容器组件和UI组件整合一个文件<br><span class="hljs-params">(2)</span>.无需自己给容器组件传递store，给&lt;App/&gt;包裹一个&lt;Provider store=&#123;store&#125;&gt;即可。<br><span class="hljs-params">(3)</span>.使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。<br><span class="hljs-params">(4)</span><span class="hljs-string">.mapDispatchToProps</span>也可以简单的写成一个对象<br><span class="hljs-params">(5)</span>.一个组件要和redux“打交道”要经过哪几步？<br><span class="hljs-params">(1)</span>.定义好UI组件<span class="hljs-params">---</span>不暴露<br><span class="hljs-params">(2)</span>.引入<span class="hljs-keyword">connect</span>生成一个容器组件，并暴露，写法如下：<br><span class="hljs-keyword">connect</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-attr">state</span> =&gt; (&#123;key:value&#125;)</span>, <span class="hljs-string">//</span>映射状态<br>&#123;key<span class="hljs-function">:xxxxxAction</span>&#125; <span class="hljs-string">//</span>映射操作状态的方法<br>)<span class="hljs-params">(UI组件)</span><br><span class="hljs-params">(4)</span>.在UI组件中通过this.props.xxxxxxx读取和操作状态<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">6</span>.求和案例<span class="hljs-selector-tag">_react-redux</span>数据共享版<br>(<span class="hljs-number">1</span>).定义一个<span class="hljs-selector-tag">Pserson</span>组件，和<span class="hljs-selector-tag">Count</span>组件通过<span class="hljs-selector-tag">redux</span>共享数据。<br>(<span class="hljs-number">2</span>).为<span class="hljs-selector-tag">Person</span>组件编写：<span class="hljs-selector-tag">reducer</span>、<span class="hljs-selector-tag">action</span>，配置<span class="hljs-selector-tag">constant</span>常量。<br>(<span class="hljs-number">3</span>).重点：<span class="hljs-selector-tag">Person</span>的<span class="hljs-selector-tag">reducer</span>和<span class="hljs-selector-tag">Count</span>的<span class="hljs-selector-tag">Reducer</span>要使用<span class="hljs-selector-tag">combineReducers</span>进行合并，<br>合并后的总状态是一个对象！！！<br>(<span class="hljs-number">4</span>).交给<span class="hljs-selector-tag">store</span>的是总<span class="hljs-selector-tag">reducer</span>，最后注意在组件中取出状态的时候，记得“取到位”。<br></code></pre></td></tr></table></figure><p><strong>纯函数</strong>必须遵守以下一些约束  </p><ol><li>不得改写参数数据</li><li>不会产生任何副作用，例如网络请求，输入和输出设备</li><li>不能调用Date.now()或者Math.random()等不纯的方法  </li></ol><p>redux的reducer函数必须是一个纯函数</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-number">7</span>.求和案例_react-redux开发者工具的使用<br>(<span class="hljs-number">1</span>).yarn <span class="hljs-keyword">add</span> redux-devtools-<span class="hljs-keyword">extension</span><br>(<span class="hljs-number">2</span>).store中进行配置<br>import <span class="hljs-comment">&#123;composeWithDevTools&#125;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-devtools-extension&#x27;</span><br><span class="hljs-keyword">const</span> store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">8</span>.求和案例<span class="hljs-selector-tag">_react-redux</span>最终版<br>(<span class="hljs-number">1</span>).所有变量名字要规范，尽量触发对象的简写形式。<br>(<span class="hljs-number">2</span>)<span class="hljs-selector-class">.reducers</span>文件夹中，编写<span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span>专门用于汇总并暴露所有的<span class="hljs-selector-tag">reducer</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（六）</title>
    <link href="/2021/11/05/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2021/11/05/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第六章-React-UI组件库"><a href="#第六章-React-UI组件库" class="headerlink" title="第六章 React UI组件库"></a>第六章 React UI组件库</h1><p><a href="https://ant.design/index-cn">ant-design(国内蚂蚁金服)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">antd的按需引入+自定主题<br><span class="hljs-number">1.</span>安装依赖：yarn add react-app-rewired customize-cra babel-plugin-<span class="hljs-keyword">import</span> less less-loader<br><span class="hljs-number">2.</span>修改package.json<br>....<br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-app-rewired start&quot;</span>,<br><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-app-rewired build&quot;</span>,<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;react-app-rewired test&quot;</span>,<br><span class="hljs-string">&quot;eject&quot;</span>: <span class="hljs-string">&quot;react-scripts eject&quot;</span><br>&#125;,<br>....<br><span class="hljs-number">3.</span>根目录下创建config-overrides.js<br><span class="hljs-comment">//配置具体的修改规则</span><br><span class="hljs-keyword">const</span> &#123; override, fixBabelImports,addLessLoader&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;customize-cra&#x27;</span>);<br><span class="hljs-built_in">module</span>.exports = override(<br>fixBabelImports(<span class="hljs-string">&#x27;import&#x27;</span>, &#123;<br><span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#x27;antd&#x27;</span>,<br><span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&#x27;es&#x27;</span>,<br><span class="hljs-attr">style</span>: <span class="hljs-literal">true</span>,<br>&#125;),<br>addLessLoader(&#123;<br><span class="hljs-attr">lessOptions</span>:&#123;<br><span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">modifyVars</span>: &#123; <span class="hljs-string">&#x27;@primary-color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span> &#125;,<br>&#125;<br>&#125;),<br>);<br><span class="hljs-number">4.</span>备注：不用在组件里亲自引入样式了，即：<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;antd/dist/antd.css&#x27;</span>应该删掉<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（五）</title>
    <link href="/2021/11/03/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/11/03/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第五章-React路由"><a href="#第五章-React路由" class="headerlink" title="第五章 React路由"></a>第五章 React路由</h1><h2 id="5-1相关理解"><a href="#5-1相关理解" class="headerlink" title="5.1相关理解"></a>5.1相关理解</h2><h5 id="5-1-1-SPA的理解"><a href="#5-1-1-SPA的理解" class="headerlink" title="5.1.1 SPA的理解"></a>5.1.1 SPA的理解</h5><ol><li>单页Web应用（single page web application，SPA）。</li><li>整个应用只有一个完整的页面。</li><li>点击页面中的链接不会刷新页面，只会做页面的局部更新。</li><li>数据都需要通过ajax请求获取, 并在前端异步展现</li></ol><h5 id="5-1-2路由的理解"><a href="#5-1-2路由的理解" class="headerlink" title="5.1.2路由的理解"></a>5.1.2路由的理解</h5><p>1.什么是路由?</p><ol><li>一个路由就是一个映射关系(key:value)</li><li>key为路径, value可能是function或component</li></ol><p>2.路由分类</p><ol><li><p>后端路由：</p><p>1)理解： value是function, 用来处理客户端提交的请求。<br>2)注册路由： router.get(path, function(req, res))<br>3)工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</p></li><li><p>前端路由：</p><p>1)浏览器端路由，value是component，用于展示页面内容。<br>2)注册路由: <Route path="/test" component={Test}><br>3)工作过程：当浏览器的path变为/test时, 当前路由组件就会变为Test组件</p></li></ol><p>3.前端路由的基石——浏览器的工作原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> history = History.createBrowserHistory() <span class="hljs-comment">//方法一，直接使用H5推出的history身上的API，形成一个栈</span><br><span class="hljs-keyword">let</span> history = History.createHashHistory() <span class="hljs-comment">//方法二，hash值（锚点#）</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-comment">/* 原生html中，靠&lt;a&gt;跳转不同的页面 */</span>&#125;<br>&#123;<span class="hljs-comment">/* &lt;a className=&quot;list-group-item&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span><br><span class="hljs-comment">&lt;a className=&quot;list-group-item active&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; */</span>&#125;<br><br>&#123;<span class="hljs-comment">/* 在React中靠路由链接实现切换组件--编写路由链接 */</span>&#125;<br>&lt;Link className=<span class="hljs-string">&quot;list-group-item&quot;</span> to=<span class="hljs-string">&quot;/about&quot;</span>&gt;About&lt;/Link&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><br>&#123;<span class="hljs-comment">/* 注册路由 */</span>&#125;<br><span class="hljs-comment">//靠路由匹配的路由组件，而不是一般组件&lt;Home/&gt;</span><br>&lt;Route path=<span class="hljs-string">&quot;/about&quot;</span> component=&#123;About&#125;/&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;/</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="5-1-3react-router-dom的理解"><a href="#5-1-3react-router-dom的理解" class="headerlink" title="5.1.3react-router-dom的理解"></a>5.1.3react-router-dom的理解</h5><ol><li>react的一个插件库。</li><li>专门用来实现一个SPA应用。</li><li>基于react的项目基本都会用到此库。</li></ol><h2 id="5-2-react-router-dom相关API"><a href="#5-2-react-router-dom相关API" class="headerlink" title="5.2. react-router-dom相关API"></a>5.2. react-router-dom相关API</h2><h5 id="5-2-1内置组件"><a href="#5-2-1内置组件" class="headerlink" title="5.2.1内置组件"></a>5.2.1内置组件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">1. <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span><br>2. <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span><br>3. <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>&gt;</span><br>4. <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span>&gt;</span><br>5. <span class="hljs-tag">&lt;<span class="hljs-name">Link</span>&gt;</span><br>6. <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span>&gt;</span><br>7. <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span><br></code></pre></td></tr></table></figure><p>路由的基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>明确好界面中的导航区、展示区<br><span class="hljs-number">2.</span>导航区的a标签改为Link标签<br>&lt;Link to=<span class="hljs-string">&quot;/xxxxx&quot;</span>&gt;Demo&lt;/Link&gt;<br><span class="hljs-number">3.</span>展示区写Route标签进行路径的匹配<br>&lt;Route path=<span class="hljs-string">&#x27;/xxxx&#x27;</span> component=&#123;Demo&#125;/&gt;<br><span class="hljs-number">4.</span>&lt;App&gt;的最外侧包裹了一个&lt;BrowserRouter&gt;或&lt;HashRouter&gt;<br></code></pre></td></tr></table></figure><p>路由组件与一般组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>写法不同：<br>一般组件：&lt;Demo/&gt;<br>路由组件：&lt;Route path=<span class="hljs-string">&quot;/demo&quot;</span> component=&#123;Demo&#125;/&gt;<br><span class="hljs-number">2.</span>存放位置不同：<br>一般组件：components<br>路由组件：pages<br><span class="hljs-number">3.</span>接收到的props不同：<br>一般组件：写组件标签时传递了什么，就能收到什么<br>路由组件：接收到三个固定的属性<br><span class="hljs-attr">history</span>:<br>go: ƒ go(n)<br><span class="hljs-attr">goBack</span>: ƒ goBack()<br><span class="hljs-attr">goForward</span>: ƒ goForward()<br><span class="hljs-attr">push</span>: ƒ push(path, state)<br><span class="hljs-attr">replace</span>: ƒ replace(path, state)<br><span class="hljs-attr">location</span>:<br>pathname: <span class="hljs-string">&quot;/about&quot;</span><br><span class="hljs-attr">search</span>: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">state</span>: <span class="hljs-literal">undefined</span><br><span class="hljs-attr">match</span>:<br>params: &#123;&#125;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span><br><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/about&quot;</span><br></code></pre></td></tr></table></figure><p>NavLink与封装NavLink</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>NavLink可以实现路由链接的高亮，通过activeClassName指定样式名<br><span class="hljs-number">2.</span>标签体内容是一个特殊的标签属性<br><span class="hljs-number">3.</span>通过<span class="hljs-built_in">this</span>.props.children可以获取标签体内容<br></code></pre></td></tr></table></figure><p>Switch的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>通常情况下，path和component是一一对应的关系。<br><span class="hljs-number">2.</span>Switch可以提高路由匹配效率(单一匹配)。<br></code></pre></td></tr></table></figure><p>解决多级路径刷新页面样式丢失的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>public/index.html 中 引入样式时不写 ./ 写 / （常用）<br><span class="hljs-number">2.</span>public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用，只适用React脚手架）<br><span class="hljs-number">3.</span>使用HashRouter<br></code></pre></td></tr></table></figure><p>路由的严格匹配与模糊匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）<br><span class="hljs-number">2.</span>开启严格匹配：&lt;Route exact=&#123;<span class="hljs-literal">true</span>&#125; path=<span class="hljs-string">&quot;/about&quot;</span> component=&#123;About&#125;/&gt;<br><span class="hljs-number">3.</span>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由<br></code></pre></td></tr></table></figure><p>Redirect的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由<br><br><span class="hljs-number">2.</span>具体编码：<br><br>&lt;Switch&gt;<br><br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;/</span>&gt;</span></span><br><br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;/</span>&gt;</span></span><br><br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>/&gt;</span></span><br><br>&lt;/Switch&gt;<br></code></pre></td></tr></table></figure><p>嵌套路由</p><ol><li>注册子路由时要写上父路由的path值</li><li>路由的匹配是按照注册路由的顺序进行的</li></ol><p><strong>向路由组件传递参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> params参数<br>   路由链接(携带参数)：&lt;Link to=<span class="hljs-string">&#x27;/demo/test/tom/18&#x27;</span>&#125;&gt;详情&lt;/Link&gt;<br>   注册路由(声明接收)：&lt;Route path=<span class="hljs-string">&quot;/demo/test/:name/:age&quot;</span> component=&#123;Test&#125;/&gt;<br>   接收参数：<span class="hljs-built_in">this</span>.props.match.params<br><span class="hljs-number">2.</span> search参数<br>   路由链接(携带参数)：&lt;Link to=<span class="hljs-string">&#x27;/demo/test?name=tom&amp;age=18&#x27;</span>&#125;&gt;详情&lt;/Link&gt;<br>   注册路由(无需声明，正常注册即可)：&lt;Route path=<span class="hljs-string">&quot;/demo/test&quot;</span> component=&#123;Test&#125;/&gt;<br>   接收参数：<span class="hljs-built_in">this</span>.props.location.search<br>   备注：获取到的search是urlencoded编码字符串，需要借助querystring解析（脚手架自带的库）<br><span class="hljs-number">3.</span> state参数<br>   路由链接(携带参数)：&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/demo/test&#x27;</span>,<span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;&#125;&#125;&gt;详情&lt;/Link&gt;<br>   注册路由(无需声明，正常注册即可)：&lt;Route path=<span class="hljs-string">&quot;/demo/test&quot;</span> component=&#123;Test&#125;/&gt;<br>   接收参数：<span class="hljs-built_in">this</span>.props.location.state<br>   备注：刷新也可以保留住参数，地址栏没有体现<br></code></pre></td></tr></table></figure><h5 id="5-2-2其它"><a href="#5-2-2其它" class="headerlink" title="5.2.2其它"></a>5.2.2其它</h5><ol><li>history对象</li><li>match对象</li><li>withRouter函数</li></ol><p>编程式路由导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">借助<span class="hljs-built_in">this</span>.prosp.history对象上的API对操作路由跳转、前进、后退<br><span class="hljs-comment">//携带参数</span><br>-<span class="hljs-built_in">this</span>.prosp.history.push()<br>-<span class="hljs-built_in">this</span>.prosp.history.replace()<br><span class="hljs-comment">//不携带参数</span><br>-<span class="hljs-built_in">this</span>.prosp.history.goBack()<br>-<span class="hljs-built_in">this</span>.prosp.history.goForward()<br>-<span class="hljs-built_in">this</span>.prosp.history.go()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(Header)<br><span class="hljs-comment">//withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</span><br><span class="hljs-comment">//withRouter的返回值是一个新组件</span><br></code></pre></td></tr></table></figure><p>BrowserRouter与HashRouter的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>底层原理不一样：<br>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。<br>HashRouter使用的是URL的哈希值。<br><span class="hljs-number">2.</span>path表现形式不一样<br>BrowserRouter的路径中没有#,例如：localhost:<span class="hljs-number">3000</span>/demo/test<br>HashRouter的路径包含#,例如：localhost:<span class="hljs-number">3000</span>/#/demo/test<br><span class="hljs-number">3.</span>刷新后对路由state参数的影响<br>(<span class="hljs-number">1</span>).BrowserRouter没有任何影响，因为state保存在history对象中。<br>(<span class="hljs-number">2</span>).HashRouter刷新后会导致路由state参数的丢失！！！<br><span class="hljs-number">4.</span>备注：HashRouter可以用于解决一些路径错误相关的问题。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（四）</title>
    <link href="/2021/11/03/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/11/03/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第四章-React-ajax"><a href="#第四章-React-ajax" class="headerlink" title="第四章 React ajax"></a>第四章 React ajax</h1><h2 id="4-1理解"><a href="#4-1理解" class="headerlink" title="4.1理解"></a>4.1理解</h2><h5 id="4-1-1前置说明"><a href="#4-1-1前置说明" class="headerlink" title="4.1.1前置说明"></a>4.1.1前置说明</h5><ol><li>React本身只关注于界面, 并不包含发送ajax请求的代码</li><li>前端应用需要通过ajax请求与后台进行交互(json数据)</li><li>react应用中需要集成第三方ajax库(或自己封装)</li></ol><h5 id="4-1-2常用的ajax请求库"><a href="#4-1-2常用的ajax请求库" class="headerlink" title="4.1.2常用的ajax请求库"></a>4.1.2常用的ajax请求库</h5><ol><li><p>jQuery: 比较重, 如果需要另外引入不建议使用</p></li><li><p>axios: 轻量级, 建议使用</p><p>1）封装XmlHttpRequest对象的ajax</p><p>2）promise风格</p><p>3）可以用在浏览器端和node服务器端</p></li></ol><h2 id="4-2react脚手架配置代理总结"><a href="#4-2react脚手架配置代理总结" class="headerlink" title="4.2react脚手架配置代理总结"></a>4.2react脚手架配置代理总结</h2><p><strong>方法一</strong></p><blockquote><p>在package.json中追加如下配置</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;proxy&quot;</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，前端请求资源时可以不加任何前缀。</li><li>缺点：不能配置多个代理。</li><li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会被<strong>中间件</strong>转发给5000 （优先匹配前端资源）</li></ol><p><strong>方法二</strong></p><ol><li>第一步：创建代理配置文件</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在<span class="hljs-attribute">src</span>下创建配置文件：<span class="hljs-attribute">src</span>/setupProxy<span class="hljs-selector-class">.js</span><br></code></pre></td></tr></table></figure><ol start="2"><li>编写setupProxy.js配置具体代理规则：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) </span>&#123;<br><br>  app.use(<br><br>    proxy(<span class="hljs-string">&#x27;/api1&#x27;</span>, &#123;  <span class="hljs-comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span><br><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">//配置转发目标地址(能返回数据的服务器地址)</span><br><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//控制服务器接收到的请求头中host字段的值</span><br><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      */</span><br><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span><br><br>    &#125;),<br><br>    proxy(<span class="hljs-string">&#x27;/api2&#x27;</span>, &#123; <br><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br><br>    &#125;)<br><br>  )<br><br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li><li>缺点：配置繁琐，前端请求资源时必须加前缀。</li></ol><h2 id="4-3消息订阅-发布机制"><a href="#4-3消息订阅-发布机制" class="headerlink" title="4.3消息订阅-发布机制"></a>4.3消息订阅-发布机制</h2><ol><li>工具库: PubSubJS</li><li>下载: npm install pubsub-js –save</li><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span>) <span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span> <span class="hljs-comment">//引入</span><br><br><span class="hljs-number">2</span>) PubSub.subscribe(<span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123; &#125;); <span class="hljs-comment">//订阅</span><br><br><span class="hljs-number">3</span>）PubSub.publish(<span class="hljs-string">&#x27;delete&#x27;</span>, data) <span class="hljs-comment">//发布消息</span><br></code></pre></td></tr></table></figure><h2 id="4-4fetch"><a href="#4-4fetch" class="headerlink" title="4.4fetch"></a>4.4fetch</h2><p>发送网络请求—使用axios发送</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.get(<span class="hljs-regexp">/api1/</span>search/users2?q=$&#123;keyWord&#125;).then(<br>          <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">//请求成功后通知List更新状态</span><br>              PubSub.publish(<span class="hljs-string">&#x27;atguigu&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">users</span>:response.data.items&#125;)<br>          &#125;,<br>          <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">//请求失败后通知App更新状态</span><br>              PubSub.publish(<span class="hljs-string">&#x27;atguigu&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">err</span>:error.message&#125;)<br>          &#125;<br>      )<br></code></pre></td></tr></table></figure><p>发送网络请求—使用fetch发送（未优化）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fetch(<span class="hljs-string">`/api1/search/users2?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>).then(<br><span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;联系服务器成功了&#x27;</span>);<br>                 <span class="hljs-comment">//返回一个新的promise对象</span><br><span class="hljs-keyword">return</span> response.json()<br>&#125;,<br><span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;联系服务器失败了&#x27;</span>,error);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br>&#125;<br>).then(<br><span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取数据成功了&#x27;</span>,response);&#125;,<br><span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取数据失败了&#x27;</span>,error);&#125;<br>)<br></code></pre></td></tr></table></figure><p>发送网络请求—使用fetch发送（优化）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//外加一个aysnc函数</span><br>search = <span class="hljs-keyword">async</span>()=&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response= <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`/api1/search/users2?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.json()<br><span class="hljs-built_in">console</span>.log(data);<br>PubSub.publish(<span class="hljs-string">&#x27;atguigu&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">users</span>:data.items&#125;)<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求出错&#x27;</span>,error);<br>PubSub.publish(<span class="hljs-string">&#x27;atguigu&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">err</span>:error.message&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>github搜索案例相关知识点</p><ol><li><p>设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。</p></li><li><p>ES6小知识点：解构赋值+重命名</p><p>let obj = {a:{b:1}}</p><p>const {a} = obj; //传统解构赋值</p><p>const {a:{b}} = obj; //连续解构赋值</p><p>const {a:{b:value}} = obj; //连续解构赋值+重命名</p></li><li><p>消息订阅与发布机制</p><ul><li>先订阅，再发布（理解：有一种隔空对话的感觉）</li><li><strong>适用于任意组件间通信</strong></li><li>要在组件的componentWillUnmount中取消订阅</li><li>fetch发送请求（<strong>关注分离</strong>的设计思想）</li></ul></li></ol><p>JQuery和Axios是对xhr的封装，fetch是windows中自带的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-keyword">const</span> response= <span class="hljs-keyword">await</span> fetch(<span class="hljs-regexp">/api1/</span>search/users2?q=$&#123;keyWord&#125;)<br>     <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.json()<br>     <span class="hljs-built_in">console</span>.log(data);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;请求出错&#x27;</span>,error);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（三）</title>
    <link href="/2021/11/01/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/11/01/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-React应用（基于React脚手架）"><a href="#第三章-React应用（基于React脚手架）" class="headerlink" title="第三章 React应用（基于React脚手架）"></a>第三章 React应用（基于React脚手架）</h1><h2 id="3-1使用create-react-app创建react应用"><a href="#3-1使用create-react-app创建react应用" class="headerlink" title="3.1使用create-react-app创建react应用"></a>3.1使用create-react-app创建react应用</h2><h5 id="3-1-1react脚手架"><a href="#3-1-1react脚手架" class="headerlink" title="3.1.1react脚手架"></a>3.1.1react脚手架</h5><ol><li>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</li></ol><ul><li>包含了所有需要的配置（语法检查、jsx编译、devServer…）</li><li>下载好了所有相关的依赖</li><li>可以直接运行一个简单效果</li></ul><ol start="2"><li>react提供了一个用于创建react项目的脚手架库: create-react-app</li><li>项目的整体技术架构为:  react + webpack + es6 + eslint</li><li>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化（一条龙服务）</li></ol><h5 id="3-1-2创建项目并启动"><a href="#3-1-2创建项目并启动" class="headerlink" title="3.1.2创建项目并启动"></a>3.1.2创建项目并启动</h5><p><strong>第一步</strong>，全局安装：npm i -g create-react-app</p><p><strong>第二步</strong>，切换到想创项目的目录，使用命令：create-react-app react_staging</p><p><strong>第三步</strong>，进入项目文件夹：cd react_staging</p><p><strong>第四步</strong>，启动项目：npm start</p><h5 id="3-1-3react脚手架项目结构"><a href="#3-1-3react脚手架项目结构" class="headerlink" title="3.1.3react脚手架项目结构"></a>3.1.3react脚手架项目结构</h5><p>public —- 静态资源文件夹</p><p>​        favicon.icon —— 网站页签图标</p><p>​        <strong>index.html ——– 主页面</strong></p><p>​        logo192.png ——- logo图</p><p>​        logo512.png ——- logo图</p><p>​        manifest.json —– 应用加壳的配置文件</p><p>​        robots.txt ——– 爬虫协议文件</p><p>src —- 源码文件夹</p><p>​        App.css ——– App组件的样式</p><p>​        <strong>App.js ——— App组件</strong></p><p>​        App.test.js —- 用于给App做测试</p><p>​        index.css —— 样式</p><p>​        <strong>index.js ——- 入口文件</strong></p><p>​        logo.svg ——- logo图</p><p>​        reportWebVitals.js — 页面性能分析文件(需要web-vitals库的支持)</p><p>​        setupTests.js —- 组件单元测试的文件(需要jest-dom库的支持)</p><p>index.js入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入react核心库</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">//引入ReactDOM</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">//引入App组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><br><span class="hljs-comment">//渲染App到页面</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><p>App组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建“外壳”组件App</span><br><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><span class="hljs-comment">//此处简写利用的是分别暴露，不是结构赋值</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Hello&#x27;</span><br><span class="hljs-keyword">import</span> Welcome <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Welcome&#x27;</span><br><br><span class="hljs-comment">//创建并暴露App组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>防止同类名样式被后来组件覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.module.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;hello.title&#125;</span>&gt;</span>Hello,React!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-4功能界面的组件化编码流程（通用）"><a href="#3-1-4功能界面的组件化编码流程（通用）" class="headerlink" title="3.1.4功能界面的组件化编码流程（通用）"></a>3.1.4功能界面的组件化编码流程（通用）</h5><ol><li><p>拆分组件: 拆分界面,抽取组件</p></li><li><p>实现静态组件: 使用组件实现静态页面效果</p></li><li><p>实现动态组件</p><p>3.1动态显示初始化数据</p><p>​    数据类型</p><p>​    数据名称</p><p>​    保存在哪个组件?</p><p>3.2交互(从绑定事件监听开始)</p></li></ol><h2 id="3-2组件的组合使用-TodoList"><a href="#3-2组件的组合使用-TodoList" class="headerlink" title="3.2组件的组合使用-TodoList"></a>3.2组件的组合使用-TodoList</h2><p>todoList案例相关知识点</p><p>1.拆分组件、实现静态组件，注意：className、style写法</p><p>2.动态初始化列表，如何确定将数据放在哪个组件的state中？</p><p>——某个组件使用：放在其自身的state中</p><p>——某些组件使用：放在他们共同的父组件state中（官方称此操作为：状态提升）</p><p>3.关于父子之间通信：</p><p>​    【父组件】给【子组件】传递数据：通过props传递</p><p>​    【子组件】给【父组件】传递数据：通过props传递，要求父提前给子传递一个函数</p><p>4.注意defaultChecked 和 checked的区别，类似的还有：defaultValue 和 value</p><p>defaultChecked只在第一次有作用，后面不生效</p><p>5.状态在哪里，操作状态的方法就在哪里</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（二）</title>
    <link href="/2021/10/29/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/10/29/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-React面向组件编程"><a href="#第二章-React面向组件编程" class="headerlink" title="第二章 React面向组件编程"></a>第二章 React面向组件编程</h1><h2 id="2-1基本理解与使用"><a href="#2-1基本理解与使用" class="headerlink" title="2.1基本理解与使用"></a>2.1基本理解与使用</h2><h5 id="2-1-1函数式组件"><a href="#2-1-1函数式组件" class="headerlink" title="2.1.1函数式组件"></a>2.1.1函数式组件</h5><p>没有this指针，不能进行state、refs属性操作，但可以进行props操作，因为函数可以接收参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">···<br><span class="hljs-comment">//1.创建函数式组件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//此处的this是undefined，因为babel编译后开启了严格模式</span><br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class="hljs-comment">1.React解析组件标签，找到了MyComponent组件。</span><br><span class="hljs-comment">2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="2-1-2类式组件"><a href="#2-1-2类式组件" class="headerlink" title="2.1.2类式组件"></a>2.1.2类式组件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">···<br><span class="hljs-comment">//1.创建类式组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br><span class="hljs-comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render中的this:&#x27;</span>,<span class="hljs-built_in">this</span>);<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class="hljs-comment">1.React解析组件标签，找到了MyComponent组件。</span><br><span class="hljs-comment">2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class="hljs-comment">3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="2-2组件三大核心属性：state"><a href="#2-2组件三大核心属性：state" class="headerlink" title="2.2组件三大核心属性：state"></a>2.2组件三大核心属性：state</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;constructor&#x27;</span>);<br><span class="hljs-built_in">super</span>(props)<br><span class="hljs-comment">//初始化状态，写成对象形式</span><br><span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125;<br>    <span class="hljs-comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span><br><span class="hljs-comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span><br><span class="hljs-comment">//解决changeWeather中this指向问题</span><br><span class="hljs-built_in">this</span>.changeWeather = <span class="hljs-built_in">this</span>.changeWeather.bind(<span class="hljs-built_in">this</span>)<br>&#125;<br>···<br><span class="hljs-comment">//严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><p>优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125;<br>···<br><span class="hljs-comment">//自定义方法————要用赋值语句的形式+箭头函数</span><br>changeWeather = <span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> isHot = <span class="hljs-built_in">this</span>.state.isHot<br><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3组件三大核心属性：props"><a href="#2-3组件三大核心属性：props" class="headerlink" title="2.3组件三大核心属性：props"></a>2.3组件三大核心属性：props</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">···<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-built_in">this</span>.props<br><span class="hljs-keyword">return</span> (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;19&#125;</span>  <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br>Person.propTypes = &#123;<br><span class="hljs-attr">name</span>:PropTypes.string.isRequired, <span class="hljs-comment">//限制name必传，且为字符串</span><br><span class="hljs-attr">sex</span>:PropTypes.string,<span class="hljs-comment">//限制sex为字符串</span><br><span class="hljs-attr">age</span>:PropTypes.number,<span class="hljs-comment">//限制age为数值</span><br><span class="hljs-attr">speak</span>:PropTypes.func,<span class="hljs-comment">//限制speak为函数</span><br>&#125;<br><span class="hljs-comment">//指定默认标签属性值</span><br>Person.defaultProps = &#123;<br><span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>props是只读的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span><br><span class="hljs-comment">// console.log(props);</span><br><span class="hljs-built_in">super</span>(props)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;constructor&#x27;</span>,<span class="hljs-built_in">this</span>.props);<br>&#125;<br></code></pre></td></tr></table></figure><p>函数式组件使用props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = props<br><span class="hljs-keyword">return</span> (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4组件三大核心属性：refs"><a href="#2-4组件三大核心属性：refs" class="headerlink" title="2.4组件三大核心属性：refs"></a>2.4组件三大核心属性：refs</h2><h5 id="2-4-1字符串形式的ref"><a href="#2-4-1字符串形式的ref" class="headerlink" title="2.4.1字符串形式的ref"></a>2.4.1字符串形式的ref</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//展示左侧输入框的数据</span><br>showData = <span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-built_in">this</span>.refs<br>alert(input1.value)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-2回调形式的ref"><a href="#2-4-2回调形式的ref" class="headerlink" title="2.4.2回调形式的ref"></a>2.4.2回调形式的ref</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//展示左侧输入框的数据</span><br>showData = <span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-built_in">this</span><br>alert(input1.value)<br>&#125;<br>            ···<br>            &lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-built_in">this</span>.input1 = c &#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;&amp;nbsp;<br></code></pre></td></tr></table></figure><h5 id="2-4-3回调ref中回调执行次数的问题"><a href="#2-4-3回调ref中回调执行次数的问题" class="headerlink" title="2.4.3回调ref中回调执行次数的问题"></a>2.4.3回调ref中回调执行次数的问题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如果 ref 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 null，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</span><br>saveInput = <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">this</span>.input1 = c;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;@&#x27;</span>,c);<br>&#125;<br>···<br>&lt;input ref=&#123;<span class="hljs-built_in">this</span>.saveInput&#125; type=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h5 id="2-4-4createRef的使用"><a href="#2-4-4createRef的使用" class="headerlink" title="2.4.4createRef的使用"></a>2.4.4createRef的使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的*/</span><br>myRef = React.createRef()<br><span class="hljs-comment">//展示左侧输入框的数据</span><br>showData = <span class="hljs-function">()=&gt;</span>&#123;<br>alert(<span class="hljs-built_in">this</span>.myRef.current.value);<br>&#125;<br>            <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-5事件处理"><a href="#2-4-5事件处理" class="headerlink" title="2.4.5事件处理"></a>2.4.5事件处理</h5><p>(1).通过onXxx属性指定事件处理函数(注意大小写)</p><p> a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 — 为了更好的兼容性</p><p> b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) —为了高效</p><p>(2).通过event.target得到发生事件的DOM元素对象 —不要过度使用ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">showData = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>alert(event.target.value);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5收集表单数据"><a href="#2-5收集表单数据" class="headerlink" title="2.5收集表单数据"></a>2.5收集表单数据</h2><h5 id="2-5-1包含表单的组件分类"><a href="#2-5-1包含表单的组件分类" class="headerlink" title="2.5.1包含表单的组件分类"></a>2.5.1包含表单的组件分类</h5><p>​    a.非受控组件（现用现调）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br><span class="hljs-comment">//创建组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>event.preventDefault() <span class="hljs-comment">//阻止表单提交</span><br><span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-built_in">this</span><br>alert(<span class="hljs-string">`你输入的用户名是：<span class="hljs-subst">$&#123;username.value&#125;</span>,你输入的密码是：<span class="hljs-subst">$&#123;password.value&#125;</span>`</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="xml">用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="xml">密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//渲染组件</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>​    b.受控组件（类似于Vue中的V-Model双向数据绑定）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br><span class="hljs-comment">//创建组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br><br><span class="hljs-comment">//初始化状态</span><br>state = &#123;<br><span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//用户名</span><br><span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//密码</span><br>&#125;<br><br><span class="hljs-comment">//保存用户名到状态中</span><br>saveUsername = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">username</span>:event.target.value&#125;)<br>&#125;<br><br><span class="hljs-comment">//保存密码到状态中</span><br>savePassword = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">password</span>:event.target.value&#125;)<br>&#125;<br><br><span class="hljs-comment">//表单提交的回调</span><br>handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>event.preventDefault() <span class="hljs-comment">//阻止表单提交</span><br><span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-built_in">this</span>.state<br>alert(<span class="hljs-string">`你输入的用户名是：<span class="hljs-subst">$&#123;username&#125;</span>,你输入的密码是：<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="xml">用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveUsername&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span></span><br><span class="xml">密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.savePassword&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//渲染组件</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="2-5-2高阶函数与函数的柯里化"><a href="#2-5-2高阶函数与函数的柯里化" class="headerlink" title="2.5.2高阶函数与函数的柯里化"></a>2.5.2高阶函数与函数的柯里化</h5><p>高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><ol><li><p>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</p></li><li><p>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</p><p>常见的高阶函数有：Promise、setTimeout、arr.map()等等</p></li></ol><p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br><span class="hljs-keyword">return</span><span class="hljs-function">(<span class="hljs-params">b</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> a+b+c<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//保存表单数据到状态中</span><br>saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)<br>&#125;<br>&#125;<br>···<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="xml">用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">username</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span></span><br><span class="xml">密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">password</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><p>不用函数柯里化的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//保存表单数据到状态中</span><br>saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType,event</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)<br>&#125;<br>···<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="xml">用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="xml">密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6组件的生命周期"><a href="#2-6组件的生命周期" class="headerlink" title="2.6组件的生命周期"></a>2.6组件的生命周期</h2><p>render调用n+1次，状态更新会重新渲染页面</p><h5 id="2-6-1引出生命周期"><a href="#2-6-1引出生命周期" class="headerlink" title="2.6.1引出生命周期"></a>2.6.1引出生命周期</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-comment">//生命周期回调函数 &lt;=&gt; 生命周期钩子函数 &lt;=&gt; 生命周期函数 &lt;=&gt; 生命周期钩子</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Life</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br><br>state = &#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">1</span>&#125;<br><br>death = <span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-comment">//卸载组件</span><br>ReactDOM.unmountComponentAtNode(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br>&#125;<br><br><span class="hljs-comment">//组件挂载完毕</span><br><span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidMount&#x27;</span>);<br><span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">//获取原状态</span><br><span class="hljs-keyword">let</span> &#123;opacity&#125; = <span class="hljs-built_in">this</span>.state<br><span class="hljs-comment">//减小0.1</span><br>opacity -= <span class="hljs-number">0.1</span><br><span class="hljs-keyword">if</span>(opacity &lt;= <span class="hljs-number">0</span>) opacity = <span class="hljs-number">1</span><br><span class="hljs-comment">//设置新的透明度</span><br><span class="hljs-built_in">this</span>.setState(&#123;opacity&#125;)<br>&#125;, <span class="hljs-number">200</span>);<br>&#125;<br><br><span class="hljs-comment">//组件将要卸载</span><br><span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//清除定时器</span><br><span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer)<br>&#125;<br><br><span class="hljs-comment">//初始化渲染、状态更新之后</span><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render&#x27;</span>);<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                    //外面的&#123;&#125;解析成js语法，里面的&#123;&#125;要求写成对象形式</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;opacity:this.state.opacity&#125;&#125;</span>&gt;</span>React学不会怎么办？<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//渲染组件</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Life</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h5 id="2-6-2react生命周期（旧）"><a href="#2-6-2react生命周期（旧）" class="headerlink" title="2.6.2react生命周期（旧）"></a>2.6.2react生命周期（旧）</h5><p><img src="/pic/React/1.png" alt="react生命周期(旧)"></p><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染</li></ol><ul><li>constructor()</li><li>componentWillMount()</li><li>render()</li><li>componentDidMount() =====&gt; 常用 一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</li></ul><ol start="2"><li><p>更新阶段: 由组件内部this.setSate()或父组件render触发</p><p>  componentWillReceiveProps(props)    //组件将要接收新的props的钩子</p></li></ol><ul><li>shouldComponentUpdate()    //控制组件更新的“阀门”，有返回值return</li><li>componentWillUpdate()</li><li>render() =====&gt; 必须使用的一个</li><li> componentDidUpdate()</li></ul><ol start="3"><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发</li></ol><ul><li>componentWillUnmount()  =====&gt; 常用 一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</li></ul><h5 id="2-6-3react生命周期-新"><a href="#2-6-3react生命周期-新" class="headerlink" title="2.6.3react生命周期(新)"></a>2.6.3react生命周期(新)</h5><p><img src="/pic/React/2.png" alt="react生命周期(新)"></p><p>getSnapshotBeforeUpdate()使用场景：在更新之前获取快照</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br><br>state = &#123;<span class="hljs-attr">newsArr</span>:[]&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">//获取原状态</span><br><span class="hljs-keyword">const</span> &#123;newsArr&#125; = <span class="hljs-built_in">this</span>.state<br><span class="hljs-comment">//模拟一条新闻</span><br><span class="hljs-keyword">const</span> news = <span class="hljs-string">&#x27;新闻&#x27;</span>+ (newsArr.length+<span class="hljs-number">1</span>)<br><span class="hljs-comment">//更新状态</span><br><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">newsArr</span>:[news,...newsArr]&#125;)<br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.refs.list.scrollHeight<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params">preProps,preState,height</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.refs.list.scrollTop += <span class="hljs-built_in">this</span>.refs.list.scrollHeight - height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="xml">&#123;</span><br><span class="xml">this.state.newsArr.map((n,index)=&gt;&#123;</span><br><span class="xml">return <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span>&#123;n&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">&#125;)</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NewsList</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染</li></ol><ul><li>constructor()</li></ul><ul><li>getDerivedStateFromProps </li><li>render()</li><li>componentDidMount() =====&gt; 常用 一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</li></ul><ol start="2"><li>更新阶段: 由组件内部this.setSate()或父组件重新render触发</li></ol><ul><li><p>getDerivedStateFromProps</p></li><li><p> shouldComponentUpdate()</p></li><li><p>render()</p></li></ul><ul><li>getSnapshotBeforeUpdate</li></ul><ul><li>componentDidUpdate()</li></ul><ol start="3"><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发</li></ol><ul><li>componentWillUnmount()  =====&gt; 常用 一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</li></ul><h2 id="2-7DOM的Diffing算法"><a href="#2-7DOM的Diffing算法" class="headerlink" title="2.7DOM的Diffing算法"></a>2.7DOM的Diffing算法</h2><p>Diffing算法针对标签，可以逐层比较</p><ol><li><p>虚拟DOM中key的作用：</p><p>​    1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p><p>​    2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, 随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p><p>​         a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​            (1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</p><p>​            (2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p><p>​        b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​            根据数据创建新的真实DOM，随后渲染到到页面</p></li><li><p>用index作为key可能会引发的问题：</p><p>​    1）若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><p>​    2）如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。</p><p>​    3）注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</p></li></ol><ol start="3"><li><p>开发中如何选择key?:</p><p>​    1）最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p><p>​    2）如果确定只是简单的展示数据，用index也是可以的。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶（一）</title>
    <link href="/2021/10/29/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/10/29/React%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-React入门"><a href="#第一章-React入门" class="headerlink" title="第一章 React入门"></a>第一章 React入门</h1><h2 id="1-1-React简介"><a href="#1-1-React简介" class="headerlink" title="1.1 React简介"></a>1.1 React简介</h2><h5 id="1-1-1介绍描述"><a href="#1-1-1介绍描述" class="headerlink" title="1.1.1介绍描述"></a>1.1.1介绍描述</h5><p>用于动态构建用户界面的 JavaScript 库(只关注于视图)，也可以说是一个将数据动态渲染为HTML视图的开源JavaScript库</p><h5 id="1-1-2-React的特点"><a href="#1-1-2-React的特点" class="headerlink" title="1.1.2 React的特点"></a>1.1.2 React的特点</h5><ol><li>声明式编码（与命令式相对）</li><li>组件化编码（可拆分html、css、js）</li><li>React Native编写原生应用，可进行移动端开发<ol><li>使用<strong>虚拟DOM</strong>+优秀的<strong>Diffing算法</strong>，尽量减少与真实DOM的交互（不总是直接操作页面真实DOM，最小化页面重绘）</li></ol></li></ol><h2 id="1-2React的基本使用"><a href="#1-2React的基本使用" class="headerlink" title="1.2React的基本使用"></a>1.2React的基本使用</h2><h5 id="1-2-1相关js库"><a href="#1-2-1相关js库" class="headerlink" title="1.2.1相关js库"></a>1.2.1相关js库</h5><ol><li>react.development.js：React核心库</li><li>react-dom.development.js：提供操作DOM的react扩展库</li><li>babel.min.js：解析JSX语法代码转为JS代码的库（也有ES6转换为ES5）</li></ol><h5 id="1-2-2创建虚拟DOM的两种方式"><a href="#1-2-2创建虚拟DOM的两种方式" class="headerlink" title="1.2.2创建虚拟DOM的两种方式"></a>1.2.2创建虚拟DOM的两种方式</h5><ol><li>纯JS方式（利用React里面的API，React.createElement)</li><li>JSX方式（需要引入babel翻译）</li></ol><h2 id="1-3React-JSX"><a href="#1-3React-JSX" class="headerlink" title="1.3React JSX"></a>1.3React JSX</h2><p>全称：JavaScript XML</p><p>基本语法规则：</p><ol><li>定义虚拟DOM，不要写引号</li><li>标签中混入JS表达式时要用{ }</li><li>样式的类名指定不要用class，用className</li><li>内联样式，要用style=的形式去写</li><li>只有一个根标签</li><li>标签必须闭合</li><li>标签首字母</li></ol><p>（1）若小写字母开头，则将该标签转为html中同名元素，若无则报错</p><p>（2）若大写字母开头，React会去渲染对应的组件，若组件没有定义则报错</p><h2 id="1-4模块与组件"><a href="#1-4模块与组件" class="headerlink" title="1.4模块与组件"></a>1.4模块与组件</h2><p>模块：向外提供特定功能的js程序，一般就是一个js文件</p><p>组件：用来实现局部功能效果的代码和资源的集合（html/css/js/image等等）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（八）</title>
    <link href="/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <url>/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第八章-网络安全基础"><a href="#第八章-网络安全基础" class="headerlink" title="第八章 网络安全基础"></a>第八章 网络安全基础</h1><h2 id="一、网络安全概述"><a href="#一、网络安全概述" class="headerlink" title="一、网络安全概述"></a>一、网络安全概述</h2><p>1.基本概念 </p><p>网络安全所需要的基本属性：机密性、消息完整性、可访问与可用性、身份认证</p><p>网络安全是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠正常地运行，网络服务不中断</p><p>2.网络安全威胁 </p><p>网络主要面临安全威胁有：首先，从报文传输方面，主要包括窃听、插入、假冒、劫持等安全威胁。比较常见的网络攻击还包括拒绝服务 DoS 以及分布式拒绝服务 DDoS 等。其次还包括映射、分组“嗅探”和 IP 欺骗等</p><h2 id="二、数据加密"><a href="#二、数据加密" class="headerlink" title="二、数据加密"></a>二、数据加密</h2><p>1.传统加密方式：</p><ul><li>替代密码</li><li>换位密码</li></ul><p>2.现代密码分类：</p><p>对称秘钥加密：加密秘钥和解密秘钥相同（密钥保密，私钥）</p><p>非对称秘钥加密：加密秘钥和解密秘钥不相同</p><h2 id="三、消息完整性与数字签名"><a href="#三、消息完整性与数字签名" class="headerlink" title="三、消息完整性与数字签名"></a>三、消息完整性与数字签名</h2><p>1.报文认证 </p><p>消息完整性检测的一个重要目的就是要完成报文认证的任务。对报文应用散列函数，得到一个固定长度的散列码，称为报文摘要。报文认证的目的有两个：一个是消息源的认证，即验证消息的来源是真实的；另一个是消息的认证，即验证消息在传送过程中未被篡改。 </p><p>2.数字签名 </p><p>报文完整性认证的过程中，数字签名是有效地技术手段。数字签名就是用私钥进行加密，而认证就是利用公开密钥进行正确地解密，所以报文加密技术是数字签名的基础。数字签名包括简单数字签名和签名报文摘要</p><h2 id="四、身份认证"><a href="#四、身份认证" class="headerlink" title="四、身份认证"></a>四、身份认证</h2><p>身份认证又称身份鉴别，是一个实体经过计算机网络向另一个实体证明其身份的过程</p><h2 id="五、秘钥分发中心与证书认证机构"><a href="#五、秘钥分发中心与证书认证机构" class="headerlink" title="五、秘钥分发中心与证书认证机构"></a>五、秘钥分发中心与证书认证机构</h2><p>1.秘钥分发中心 </p><p>对称密钥分发的典型解决方案是，通信各方建立一个大家都信赖的密钥分发中心 (Key </p><p>Distribution Center, KDC),并且每一方和 KDC 之间都保持一个长期的共享密钥</p><p>2.证书认证机构 </p><p>将公钥与特定实体绑定，通常是由认证中心（Certification Authority, CA）完成的。CA 具 </p><p>有以下作用。 </p><p>1）CA 可以证实一个实体的真实身份</p><p>2）一旦 CA 验证了某个实体的身份，CA 会生成一个把其身份和实体的公钥绑定起来的证书,其中包含该实体的公钥及其全局唯一的身份识别信息等，并由 CA 对证书进行数字签名</p><h2 id="六、防火墙与入侵检测系统"><a href="#六、防火墙与入侵检测系统" class="headerlink" title="六、防火墙与入侵检测系统"></a>六、防火墙与入侵检测系统</h2><p>防火墙是能够隔离组织内部网络与公共互联网，允许某些分组通过，而阻止其他分组进入或离开内部网络的软件、硬件或者软件硬件结合的一种设施</p><h2 id="七、网络安全协议"><a href="#七、网络安全协议" class="headerlink" title="七、网络安全协议"></a>七、网络安全协议</h2><p>1.电子邮件对网络安全的需求：机密性、完整性、身份认证性、抗抵赖性</p><p>安全电子邮件标准是 PGP 标准</p><p>2.安全套接字层 SSL 是由 NetScape 最先实现，并广泛部署的安全协议，几乎所有的浏览器和 Web 服务器都支持（介于应用层与传输层之间）</p><p>简化的 SSL 主要包含 4 个部分：</p><p>1）发送方和接收方利用各自证书、私钥认证、鉴别彼此，交换共享密钥</p><p>2）密钥派生或密钥导出</p><p>3）数据传输</p><p>4）连接关闭</p><ol start="3"><li>虚拟专用网（VPN）是建立在公共网络上的安全通道</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（七）</title>
    <link href="/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第七章-无线与移动网络"><a href="#第七章-无线与移动网络" class="headerlink" title="第七章 无线与移动网络"></a>第七章 无线与移动网络</h1><h2 id="一、无线网络"><a href="#一、无线网络" class="headerlink" title="一、无线网络"></a>一、无线网络</h2><p>1.无线网络基本结构 </p><p>无线网络主要包括：无线主机、无线链路、基站、网络基础设施</p><p>Ad Hoc 自组织网络无线主机不通过基站（即没有基站），直接与另一个无线主机直接通信。自组织网络没有基站、无线主机，也不与网络基础设施相连，因此，主机本身必须提供诸如路由选择、地址分配等服务。故 Ad Hoc 网络中的每个节点都兼有路由器和主机两种功能</p><p>2.无线链路与无线网络特性</p><p>无线链路有别于有线链路的主要表现在以下方面：信号强度的衰减、干扰、多径传播、隐藏终端（检测不到碰撞）</p><h2 id="二、移动网络"><a href="#二、移动网络" class="headerlink" title="二、移动网络"></a>二、移动网络</h2><p>无线网络不一定是移动网络、但移动网络一定是无线网络。移动网络中的移动结点是随时间改变其与网络连接位置的结点，并且移动采用无线通信技术 </p><p>1.寻址 </p><ul><li>外部网络可以通过向所有其他网络发通告，告诉它们该移动结点正在它的网络中</li><li>将移动网络功能从网络核心搬到网络边缘，由该移动结点的<strong>归属网络</strong>来实现</li></ul><p>2.移动结点的路由选择 </p><ul><li>间接路由选择：由归属代理转发数据给外部代理</li><li>直接路由选择：由通信代理通过归属代理获得转交地址，直接发送到外部代理</li></ul><h2 id="三、无线局域网IEEE-802-11"><a href="#三、无线局域网IEEE-802-11" class="headerlink" title="三、无线局域网IEEE 802.11"></a>三、无线局域网IEEE 802.11</h2><p>1.IEEE802.11 体系结构 </p><p>基站（AP）和基本服务集（BSS）</p><p>2.IEEE 802.11 的 MAC协议</p><p>IEEE 802.11 的 MAC 协议采用 CSMA/CA 协议（带碰撞避免的CSMA）</p><p>3.IEEE 802.11 帧</p><p>IEEE 802.11 帧共有 3 种类型：控制帧、数据帧和管理帧。IEEE 802.11 数据帧结构：MAC首部（30 字节）、帧主体、尾部（FCS）</p><h2 id="四、蜂窝网络"><a href="#四、蜂窝网络" class="headerlink" title="四、蜂窝网络"></a>四、蜂窝网络</h2><p>蜂窝网络体系结构</p><p>基站系统BSS：基站控制器、收发基站</p><p>移动交换中心MSC</p><p>网关MSC</p><h2 id="五、移动IP网络"><a href="#五、移动IP网络" class="headerlink" title="五、移动IP网络"></a>五、移动IP网络</h2><p>移动 IP 标准由 3 部分组成：代理发现、向归属代理注册以及数据报的间接路由选择</p><h2 id="六、其他典型无线网络简介"><a href="#六、其他典型无线网络简介" class="headerlink" title="六、其他典型无线网络简介"></a>六、其他典型无线网络简介</h2><p>WiMax 全球微波互联接入(WiMax)称为 IEEE 802.16 标准，目的是在更大范围内为用户提供可以媲美有线网络的无线通信解决方案</p><p>蓝牙 IEEE 802.15.1 网络以小范围、低功率和低成本运行</p><p>ZigBee IEEE 第二个个人区域网络标准是 IEEE 802.15.4，称为 ZigBee。ZigBee 主要以低功率、低数据速率、低工作周期应用为目标</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网路原理（六）</title>
    <link href="/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%8E%9F%E7%90%86%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%8E%9F%E7%90%86%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第六章-物理层"><a href="#第六章-物理层" class="headerlink" title="第六章 物理层"></a>第六章 物理层</h1><h2 id="一、数据通信基础"><a href="#一、数据通信基础" class="headerlink" title="一、数据通信基础"></a>一、数据通信基础</h2><p>1.数据通信基本概念</p><p>消息与信息：信息是消息中包含的有意义的内容，消息是信息的载体</p><p>通信：本质就是在一点精确或近似地再生另一点的信息</p><p>通信系统：能够实现通信功能的各种技术、设备和方法的总体</p><p>信号：在传输通道中传播<strong>信息的载体</strong></p><p>数据：对客观事物的性质状态以及相互关系等进行记载的<strong>符号</strong>及其组合</p><p>信道：以传输介质为基础的信号通道</p><p>2.数据通信系统模型</p><p>数据通信系统的构成：信源、发送设备、信道、信宿、噪声</p><p>模拟通信和数字通信：</p><p>模拟信号的因变量是<strong>连续</strong>的，数字信号的因变量是<strong>离散</strong>的</p><p><img src="/pic/jiwang/40.png" alt="数据通信方式"></p><h2 id="二、物理介质"><a href="#二、物理介质" class="headerlink" title="二、物理介质"></a>二、物理介质</h2><p>1.引导型传输介质 </p><ul><li>架空明线</li><li>双绞线</li><li>同轴电缆</li><li>光纤 </li></ul><p>2.非引导型传输介质 </p><ul><li>地波传输</li><li>天波传输</li><li>视线传输</li></ul><h2 id="三、信道与信道容量"><a href="#三、信道与信道容量" class="headerlink" title="三、信道与信道容量"></a>三、信道与信道容量</h2><p>1.信道分类与模型</p><p><img src="/pic/jiwang/41.png"></p><p>2.信道传输特性</p><p><img src="/pic/jiwang/42.png"></p><p>3.信道容量</p><p>（1）奈奎斯特公式，给出了<strong>理想无噪声信道</strong>的信道容量：C = 2B1og2M 式中，C 为信道容量，单位为 bit/s 或 bps；B 为信道带宽，单位为 Hz；M 为进制数，即信号状态数</p><p>（2）香农公式给出连续信道的信道容量为：C=Blog2（1+S/N）</p><p>（3）离散信道容量：每个符号能传输的最大平均信息量和单位时间内能够传输的最大平均信息量</p><h2 id="四、基带传输"><a href="#四、基带传输" class="headerlink" title="四、基带传输"></a>四、基带传输</h2><p>1.基带传输基本概念</p><p>基带传输：直接在信道中传送基带信号</p><p>2.数字基带传输编码</p><p><img src="/pic/jiwang/43.png"></p><p><img src="/pic/jiwang/44.png"></p><h2 id="五、频带传输"><a href="#五、频带传输" class="headerlink" title="五、频带传输"></a>五、频带传输</h2><p><img src="/pic/jiwang/45.png" alt="三种调制方式"></p><h2 id="六、物理层接口规程"><a href="#六、物理层接口规程" class="headerlink" title="六、物理层接口规程"></a>六、物理层接口规程</h2><p>物理层接口特性： </p><p>（1）机械特性：也叫物理特性，指明通信实体间硬件连接接口的机械特点</p><p>（2）电气特性：规定了在物理连接上，导线的电气连接及有关电路的特性</p><p>（3）功能特性：指明物理接口各条信号线的用途，包括接口信号线功能的规定方法以及接口信号线的功能分类</p><p>（4）规程特性：即通信协议，指明利用接口传输比特流的全过程，以及各项用于传输的事件发生的合法顺序，包括事件的执行顺序和数据传输方式，即在物理连接建立、维持和交换信息时， DTE（数据终端设备）、DCE（数据电路端接设备）双方在各自电路上的动作序列等</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（五）</title>
    <link href="/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第五章-数据链路层与局域网"><a href="#第五章-数据链路层与局域网" class="headerlink" title="第五章 数据链路层与局域网"></a>第五章 数据链路层与局域网</h1><h2 id="一、数据链路层服务"><a href="#一、数据链路层服务" class="headerlink" title="一、数据链路层服务"></a>一、数据链路层服务</h2><p>链路：通信链路连接的相邻结点的通信信道</p><p>数据链路层传输的数据单元称为<strong>帧</strong>。数据链路层通常提供以下几点服务：</p><p>1）组帧（加上帧头，帧尾）</p><p>2）链路接入：点对点链路、广播链路</p><p>3）可靠交付</p><p>4）差错控制</p><h2 id="二、差错控制"><a href="#二、差错控制" class="headerlink" title="二、差错控制"></a>二、差错控制</h2><p>1.差错控制的四种基本方式</p><ul><li>检错重发</li><li>前向纠错（接收端进行差错纠正）</li><li>反馈校验（接收端将收到的数据原封不动发回发送端）</li><li>检错丢弃</li></ul><p>2.差错编码的基本原理</p><p><strong>香农信道编码定理</strong>：理论上可以通过编码使得数据传输过程不发生错误，或者将错误概率控制在很小的数值之下</p><p>3.差错编码的检错与纠错能力</p><p><strong>汉明距离</strong>：两个等长码字之间，对应位不同的位数</p><p>编码集的汉明距离：该编码集中任意两个码字之间汉明距离的最小值</p><p>差错编码的检错或纠错能力跟该差错编码的编码集的汉明距离有关</p><p>1）对于检错编码，如果编码集的汉明距离 ds=r+1,则该差错编码可以检测 r 位的差错</p><p>2）对于纠错编码，如果编码集的汉明距离 ds=2r+1,,则该差错编码可以纠正 r 位的差错</p><p>4.典型的差错编码</p><p><img src="/pic/jiwang/35.png"></p><p><img src="/pic/jiwang/39.png" alt="CRC解题思路"></p><h2 id="三、多路访问控制协议"><a href="#三、多路访问控制协议" class="headerlink" title="三、多路访问控制协议"></a>三、多路访问控制协议</h2><p>多路访问控制MAC：广播信道上用于协调各个结点的数据发送</p><p><img src="/pic/jiwang/36.png"></p><p><img src="/pic/jiwang/37.png"></p><h2 id="四、局域网"><a href="#四、局域网" class="headerlink" title="四、局域网"></a>四、局域网</h2><p>1.数据链路层寻址与 ARP</p><p>MAC地址：每个接口对应一个MAC地址，且全球唯一（应用层域名、传输层端口、网络层IP地址、数据链路层MAC地址，都唯一且互不冒犯），长度48位</p><p>地址解析协议（ARP）：根据本网内目的主机或默认网关的 IP 地址获取其 MAC 地址（查询/响应的<strong>广播</strong>方式）</p><p>2.以太网</p><p>以太网采用 CSMA/CD 控制访问方法</p><p>以太网技术：（1）10Base-T 以太网–10兆 基带传输 双绞线/距离（2）快速以太网（3）千兆位以太网（4）万兆位 </p><p>以太网</p><p>3.交换机</p><p>采用转发与过滤的方式，避免广播形式出现的碰撞，交换机通过<strong>自学习</strong>构建交换表</p><p>交换机就是<strong>多端口网桥</strong>，是目前应用最广泛的数据链路层设备</p><p>交换机的优点是：消除冲突、支持异质链路、易于进行网络管理</p><p>4.虚拟局域网（VLAN）</p><p>虚拟局域网是一种基于交换机（必须支持 VLAN 功能）的逻辑分割广播域的局域网应用形式（能够抑制广播风暴）</p><p><img src="/pic/jiwang/38.png"></p><p>划分虚拟局域网的方法主要有三种：基于交换机端口划分、基于 MAC 地址划分、基于上层 协议类型或地址划分</p><h2 id="五、点对点链路协议"><a href="#五、点对点链路协议" class="headerlink" title="五、点对点链路协议"></a>五、点对点链路协议</h2><p>1.点对点协议（PPP）</p><p>PPP 能够处理差错检测、支持多种上层协议（即支持复用）、允许在连接时刻协商 IP 地址、允许身份认证等</p><p>典型应用：拨号上网</p><p>功能：成帧、链路控制协议LCP、网络控制协议NCP</p><p>2.高级数据链路控制协议（HDLC）</p><p>可应用与点对点链路和点对多点链路</p><p>原理：HDLC 协议是面向位的协议，为确保数据的透明传输，HDLC 使用<strong>位填充</strong>。首先，发送端扫描整个数据字段，只要发现 5 个连续的 1，就立即插入一个 0。接收端接收一个帧后，先找到标志字段确定帧的边界，接着利用硬件扫描整个比特流，当发现 5 个连续的 1，就删除其后的 0，以还原原来的信息</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（四）</title>
    <link href="/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="一、网络层服务"><a href="#一、网络层服务" class="headerlink" title="一、网络层服务"></a>一、网络层服务</h2><p>网络层的主要作用是将（承载传输层报文段的）网络层数据报从<strong>源主机</strong>送达<strong>目的主机</strong></p><p>主要功能包括：</p><ul><li>转发：分组从输入接口转移到输出接口</li><li>路由选择：决定分组经过的路由或路径</li></ul><p><img src="/pic/jiwang/29.png"></p><h2 id="二、数据报网络与虚电路网络"><a href="#二、数据报网络与虚电路网络" class="headerlink" title="二、数据报网络与虚电路网络"></a>二、数据报网络与虚电路网络</h2><p>1.数据报网络 </p><p>按照目的主机地址进行路由选择的网络称为数据报网络</p><p>2.虚电路网络</p><p>虚电路网络在网络层提供面向连接的分组交换服务</p><h2 id="三、网络互连与网络互连设备"><a href="#三、网络互连与网络互连设备" class="headerlink" title="三、网络互连与网络互连设备"></a>三、网络互连与网络互连设备</h2><p>1.异构网络主要是指两个网络的<strong>通信技术</strong>和<strong>运行协议</strong>的不同</p><p>实现异构网络互连的基本策略：</p><ul><li>协议转换</li><li>构建虚拟互联网络</li></ul><p>2.路由器</p><p>在网络层实现网络互连的设备是<strong>路由器</strong>。集线器和中继器都是物理层设备。交换机和网桥是数据链路层设备，<strong>交换机</strong>就是多端口的网桥，是目前应用最广泛的数据链路层设备</p><p><img src="/pic/jiwang/30.png"></p><h2 id="四、网络层拥塞控制"><a href="#四、网络层拥塞控制" class="headerlink" title="四、网络层拥塞控制"></a>四、网络层拥塞控制</h2><p><img src="/pic/jiwang/31.png"></p><h2 id="五、Internet网络层"><a href="#五、Internet网络层" class="headerlink" title="五、Internet网络层"></a>五、Internet网络层</h2><p>1.IPv4协议</p><p><img src="/pic/jiwang/32.png" alt="IP数据报格式"></p><p>2.IPv4编址</p><p>IP 地址划分为两部分：前缀（网络号）和后缀（主机号）。定长前缀为分类地址， 无类地址中网络地址前缀长度可变</p><p><img src="/pic/jiwang/33.png"></p><p><strong>子网划分</strong>：子网化就是指将一个较大的子网划分为多个较小子网的过程。超网化是指将具有较长前缀的相对较小的子网合并为一个具有稍短前缀的相对较大的子网。 超网化是子网化的逆过程。子网掩码用来定义一个子网的网络前缀长度，是一个 32 位数，取值规则是：对应网络前缀，全部为 1，其余全部为 0</p><p><strong>路由聚合</strong>：路由聚合是为了提高路由效率，减少路由表项数，尽可能将能够聚合在一起的子网聚合成一个大的子网。“下一跳地址”和“接口”相同，才能聚合</p><p>3.动态主机配置协议 DHCP </p><p>工作过程：</p><ul><li>DHCP 服务器发现</li><li>DHCP 服务器提供</li><li>DHCP 请求 </li><li>DHCP  确认</li></ul><p>4.网络地址转换</p><p>NAT 工作原理：对于从内网出去，进入公共互联网的 IP 数据报，将其源 IP 地址替换为 NAT 服务器拥有的合法的公共 IP 地址， 同时替换源端口号，并将替换关系记录到 NAT 转换表中；对于从公共互联网返回的 IP 数据报，依据其目的 IP 地址与目的端口号检索 NAT 转换 表，并利用检索到的内部私有 IP 地址与对应的端口号替换目的 IP 地址和目的端口号，然后将 IP 数据报转发到内部网络</p><p>5.ICMP（互联网控制报文协议）</p><p>ICMP 包括 3 个字段：类型、代码和校验和</p><p>ICMP 差错报告报文有 5 种： 终点不可达、 源点抑制、 时间超时、 参数问题、 路由重定向。ICMP 询问报文： 回声（echo） 请求/应答（Ping命令）、 时间戳请求/应答</p><p>6.IPv6</p><ul><li>解决IPv4地址耗尽的问题</li><li>IPv6报文首部长度固定40字节</li><li>IPv6地址长度128位</li><li>IPv4到IPv6的迁移<ul><li>双协议栈</li><li>隧道</li></ul></li></ul><h2 id="六、路由算法与路由协议"><a href="#六、路由算法与路由协议" class="headerlink" title="六、路由算法与路由协议"></a>六、路由算法与路由协议</h2><p><img src="/pic/jiwang/34.png"></p><p>层次化路由选择：实现大规模网络路由选择最有效的、最可行的解决方案。每个自治系统都存在网关路由器。层次化路由选择将大规模互联网的路由划分为两层：<strong>自治系统内路由选择</strong>和<strong>自治系统间路由选择</strong></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（三）</title>
    <link href="/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h1><h2 id="一、传输层的基本服务"><a href="#一、传输层的基本服务" class="headerlink" title="一、传输层的基本服务"></a>一、传输层的基本服务</h2><p>1.传输层功能</p><p>传输层的<strong>核心任务</strong>是：是为应用进程之间提供端到端的逻辑通信服务</p><p>功能：传输层寻址；对应用层报文进行分段和重组；对报文进行差错检测；实现进程间端到端可靠数据传输控制；面向应用层实现复用与分解；实现端到端的流量控制；拥塞控制等</p><p>2.传输层寻址与端口</p><p>用统一的寻址方法对应用进程进行标识–<strong>端口号</strong></p><p>在全网范围内利用“<strong>IP地址+端口号</strong>”唯一标识一个通信端点（应用程序）</p><p>传输层端口号为16位整数</p><p><img src="/pic/jiwang/22.png"></p><p>3.无连接服务与面向连接服务</p><p>无连接服务是指数据传输之前无需与对端进行任何信息交换（即“握手”），直接构造传输层报文段并向接收端发送–<strong>UDP</strong></p><p>面向连接服务是指在数据传输之前，需要双方交换一些控制信息，<strong>建立逻辑连接</strong>，然后再传输数据，数据传输结束后还需要再拆除连接–<strong>TCP</strong></p><h2 id="二、传输层的复用与分解"><a href="#二、传输层的复用与分解" class="headerlink" title="二、传输层的复用与分解"></a>二、传输层的复用与分解</h2><p><img src="/pic/jiwang/23.png"></p><h2 id="三、停-等协议与滑动窗口协议"><a href="#三、停-等协议与滑动窗口协议" class="headerlink" title="三、停-等协议与滑动窗口协议"></a>三、停-等协议与滑动窗口协议</h2><p>1.可靠数据传输基本原理</p><p>不可靠传输信道在数据传输中可能发生：（1）比特差错（2）乱序（3）数据丢失</p><p>实现可靠数据传输的措施主要包括以下几种：</p><ul><li>差错检测：利用差错编码实现数据包传输过程中的比特差错检测（甚至纠正）</li><li>确认：接收方向发送方反馈接收状态</li><li>重传：发送方重新发送接收方没有正确接收的数据</li><li>序号：确保数据按序提交</li><li>计时器：解决数据丢失问题</li></ul><p>2.停-等协议</p><p>停-等协议的基本工作过程是：</p><p> 1、发送方发送经过差错编码和编号的报文段，等待接收方的确认（<strong>发送并等待确认</strong>）</p><p>2、接收方如果正确接收报文段，即差错检测无误且序号正确，则接收报文段，并 </p><p>向发送方发送 ACK，否则丢弃报文段，并向发送方发送 NAK（<strong>接收并确认/否认</strong>）</p><p>3、发送方如果收到 ACK，则继续发送后续报文段，否则重发刚刚发送的报文段（<strong>继续发送/重发</strong>）</p><p>3.滑动窗口协议</p><p>停止-等待机制<strong>降低了信道利用率</strong>，解决方法：流水线协议或管道协议–允许发送方在没有收到确认前连续发送多个分组，典型的流水线协议：<strong>滑动窗口协议</strong></p><p>流水线协议的改进：</p><ul><li>增加分组序号范围</li><li>发送方和（或）接收方必须缓存多个分组</li></ul><p>两种最具代表性的滑动窗口协议是：<strong>GBN 协议</strong>（发送窗口≥1，接收窗口=1）和 <strong>SR 协议</strong> （发送窗口和接收窗口都大于 1）</p><h2 id="四、用户数据报协议（UDP）"><a href="#四、用户数据报协议（UDP）" class="headerlink" title="四、用户数据报协议（UDP）"></a>四、用户数据报协议（UDP）</h2><p>用户数据报协议 UDP 是 Internet 传输层协议，提供无连接、不可靠、数据报尽力传输服务。UDP 与 TCP 相比，优点有：（1）应用进程更容易控制发送什么数据以及何时发送（2）无需建立连接（3）无连接状态（4）首部开销小</p><p><img src="/pic/jiwang/24.png" alt="UDP数据报结构"></p><h2 id="五、传输控制协议（TCP）"><a href="#五、传输控制协议（TCP）" class="headerlink" title="五、传输控制协议（TCP）"></a>五、传输控制协议（TCP）</h2><p>1.TCP报文段结构</p><p><img src="/pic/jiwang/25.png"></p><p>2.TCP连接管理</p><p>连接建立–三次握手</p><ul><li>SYN连接请求（同步）</li><li>SYNACK确认</li><li>ACK确认</li></ul><p><img src="/pic/jiwang/27.png" alt="建立连接--三次握手"></p><p><img src="/pic/jiwang/28.png" alt="断开连接--四次挥手"></p><p><img src="/pic/jiwang/26.png" alt="总结"></p><p>3.TCP可靠数据传输</p><p>TCP 的可靠数据传输实现机制包括差错编码、确认、序号、重传、计时器等</p><p>4.TCP流量控制</p><p>流量控制（flow control）的目的是协调协议发送方与接收方的数据发送与接收速度，避免因发送方发送数据太快，超出接收方的数据接收和处理能力，导致接收方被数据“淹没”</p><p>5.TCP拥塞控制</p><p>拥塞控制（congestion control）就是通过合理调度、规范、调整向网络中发送数据的主机数量、发送速率或数据量，以避免拥塞或尽快消除己发生的拥塞</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本语法</title>
    <link href="/2021/10/24/Git%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/10/24/Git%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="/pic/Git/1.png" alt="脑图"></p><h1 id="一、版本控制"><a href="#一、版本控制" class="headerlink" title="一、版本控制"></a>一、版本控制</h1><h3 id="1-什么是版本控制？"><a href="#1-什么是版本控制？" class="headerlink" title="1.什么是版本控制？"></a>1.什么是版本控制？</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术，简单说就是用于管理多人协同开发项目的技术</p><h3 id="2-常见的版本控制工具"><a href="#2-常见的版本控制工具" class="headerlink" title="2.常见的版本控制工具"></a>2.常见的版本控制工具</h3><p>Git、SVM、CVS、VSS、TFS…</p><h3 id="3-版本控制分类"><a href="#3-版本控制分类" class="headerlink" title="3.版本控制分类"></a>3.版本控制分类</h3><ul><li>本地版本控制</li></ul><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS</p><ul><li>集中版本控制（SVM）</li></ul><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作，如SVN、CVS、VSS</p><ul><li>分布式版本控制（Git）</li></ul><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里</p><h1 id="二、常用的Linux命令"><a href="#二、常用的Linux命令" class="headerlink" title="二、常用的Linux命令"></a>二、常用的Linux命令</h1><ul><li>cd：改变目录<ul><li>cd..：回退到上一个目录，直接cd进入默认目录</li></ul></li><li>pwd：显示当前所在的目录路径</li><li>ls（ll）：都是列出当前目录中的所有文件，只不过ll（两个ll）列出的内容更详细</li><li>touch : 新建一个文件如 touch index.js，就会在当前目录下新建一个index.js文件</li><li>mkdir:  新建一个目录，就是新建一个文件夹</li><li>rm:  删除一个文件，rm index.js 就会把index.js文件删除<ul><li>rm -r :  删除一个文件夹，rm -r src 删除src目录</li><li>rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！（f迭代，/根目录）</li></ul></li><li>mv：移动文件, mv index.html src，index.html 是我们要移动的文件,，src 是目标文件夹， 这样写必须保证文件和目标文件夹在同一目录下</li><li>reset：重新初始化终端/清屏</li><li>clear 清屏</li><li>history 查看命令历史</li><li>help 帮助</li><li>exit 退出</li><li>“#”表示注释</li></ul><h1 id="三、Git基本概念"><a href="#三、Git基本概念" class="headerlink" title="三、Git基本概念"></a>三、Git基本概念</h1><p><img src="/pic/Git/2.jpg"></p><ul><li><p>工作区</p><ul><li>本地项目存放文件的位置，即workspace</li></ul></li><li><p>暂存区(Index/Stage)</p><ul><li>暂时存放文件的地方，通过<strong>add</strong>命令将工作区的文件加到缓冲区</li></ul></li><li><p>本地仓库(Repository)</p><ul><li>通常情况下，我们使用<strong>commit</strong>命令可以将暂存区的文件添加到本地仓库</li><li>通常而言，HEAD指针指向的是master分支</li></ul></li><li><p>远程仓库(Remote)</p><ul><li>GitHub托管项目时，它就是一个远程仓库</li><li>通常我们使用clone命令将远程仓库代码拷贝下来，本地代码更新后，通过<strong>push</strong>推送到远程仓库</li></ul></li></ul><p><img src="/pic/Git/3.jpg" alt="基本工作流程"></p><h1 id="四、Git进阶"><a href="#四、Git进阶" class="headerlink" title="四、Git进阶"></a>四、Git进阶</h1><h3 id="1-Git使用前配置"><a href="#1-Git使用前配置" class="headerlink" title="1.Git使用前配置"></a>1.Git使用前配置</h3><p>在使用git前，需要告诉git你是谁，在向git仓库中提交时需要用到。</p><ol><li>配置提交人姓名:<code>git config --global user.name 提交人姓名</code></li><li>配置提交人邮箱:<code>git config --global user.email 提交人邮箱</code></li><li>查看git配置信息:<code>git config --list</code></li></ol><blockquote><p><strong>注意</strong></p></blockquote><ul><li>如果要对配置信息进行修改，重复上述命令即可</li><li>配置只需要执行一次。</li></ul><h3 id="2-提交步骤"><a href="#2-提交步骤" class="headerlink" title="2.提交步骤"></a>2.提交步骤</h3><ul><li><p><code>git init</code>初始化git仓库</p></li><li><p><code>git status</code>查看文件状态</p></li><li><p><code>git add 文件列表</code>追踪文件</p></li><li><p><code>git commit -m 提交信息</code>向本地仓库中提交代码</p></li><li><p><code>git log</code>查看提交记录</p></li><li><p><code>git push https://github.com/ovfan/git-demo.git master</code>本地仓库推送到GitHub远程仓库</p></li><li><p><code>git remote add origin https://github.com/ovfan/git-demo.git</code> 为远端仓库地址添加别名</p><ul><li>添加完别名后，下次推送使用<code>git push origin master</code></li></ul></li><li><p><code>git push -u 远程仓库地址别名 分支名称</code> -u 记住推送地址及分支，下次推送只需要输入<code>git push</code>即可</p></li></ul><h3 id="3-分支命令"><a href="#3-分支命令" class="headerlink" title="3.分支命令"></a>3.分支命令</h3><ul><li><code>git branch</code> 查看本地分支</li><li><code>git branch -r</code>查看远程分支</li><li><code>git branch 分支名称</code>创建分支<ul><li><code>git checkout -b 分支名称</code>创建并切换到新建分支</li></ul></li><li><code>git checkout 分支名称</code>切换分支</li><li><code>git merge 来源分支</code>合并分支</li><li><code>git branch -d 分支名称</code>删除分支<ul><li>分支被合并后才允许删除</li><li><code>git branch -D</code>强制删除</li></ul></li><li><code>git branch -m &lt;oldbranch-name&gt; &lt;newbranch-name&gt;</code>重命名分支</li><li><code>git add .</code>全部上传到缓存区<ul><li><code>git add 指定文件</code>指定文件上传到缓存区</li></ul></li></ul><h1 id="五、小灶"><a href="#五、小灶" class="headerlink" title="五、小灶"></a>五、小灶</h1><h3 id="1-拉取操作"><a href="#1-拉取操作" class="headerlink" title="1.拉取操作"></a>1.拉取操作</h3><ul><li>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></li><li>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></li></ul><h3 id="2-ssh免登录"><a href="#2-ssh免登录" class="headerlink" title="2.ssh免登录"></a>2.ssh免登录</h3><ul><li>生成密钥：<code>ssh-keygen</code></li><li>密钥存储目录:<code>C:\Users\shinelon\.ssh</code></li><li>公钥名称：<code>id_rsa.pub</code></li><li>私钥名称：<code>id_rsa</code></li></ul><h3 id="3-Git忽略清单"><a href="#3-Git忽略清单" class="headerlink" title="3.Git忽略清单"></a>3.Git忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件，git忽略清单文件名称：<strong>「.gitignore」</strong></p><p>参考</p><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/koameBEQILNz1ViT_oB_cQ">前端fan</a></li><li><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ">狂神聊Git</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（二）</title>
    <link href="/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-网络应用"><a href="#第二章-网络应用" class="headerlink" title="第二章 网络应用"></a>第二章 网络应用</h1><h2 id="一、计算机网络应用体系结构"><a href="#一、计算机网络应用体系结构" class="headerlink" title="一、计算机网络应用体系结构"></a>一、计算机网络应用体系结构</h2><p><img src="/pic/jiwang/9.png"></p><h2 id="二、网络应用通信基本原理"><a href="#二、网络应用通信基本原理" class="headerlink" title="二、网络应用通信基本原理"></a>二、网络应用通信基本原理</h2><p>网络应用的本质是运行在不同主机上的应用进程之间的通信，无论哪种类型的网络应用，基本通信方式都是C/S通信</p><p><img src="/pic/jiwang/10.png"></p><h2 id="三、域名系统（DNS）"><a href="#三、域名系统（DNS）" class="headerlink" title="三、域名系统（DNS）"></a>三、域名系统（DNS）</h2><p>DNS 是一个重要的基础应用，因为任何一个需要使用域名进行通信的网络应用，在应用通信之前首先需要请求 DNS 应用，将域名映射为 IP 地址。实现将域名映射为 IP 地址的过程，称为<strong>域名解析</strong></p><ol><li> 层次树状结构的命名方法</li></ol><ul><li>国家顶级域名 nTLD</li><li>通用顶级域名 gTLD</li><li>基础结构域名</li></ul><ol start="2"><li> 域名服务器</li></ol><p>为了实现域名解析，需要建立分布式数据库，存储网络中域名与IP地址的映射关系数据</p><ol start="3"><li> 域名服务器分类：</li></ol><ul><li>根域名服务器</li></ul><ul><li>顶级域名服务器</li><li>权威域名服务器</li><li>中间域名服务器</li></ul><ol start="4"><li>  域名解析过程</li></ol><p>递归解析：依次查询</p><p><img src="/pic/jiwang/11.png" alt="递归查询"></p><p>迭代解析：直接响应结果，减轻根域名服务器的压力</p><p><img src="/pic/jiwang/12.png" alt="迭代查询"></p><h2 id="四、万维网应用"><a href="#四、万维网应用" class="headerlink" title="四、万维网应用"></a>四、万维网应用</h2><ol><li> 万维网结构</li></ol><p>Web 应用主要包括 Web 服务器、浏览器与超文本传输协议（HTTP）等部分，浏览器就是 Web 应用的客户端软件，请求首先建立TCP连接</p><p>HTML 基本 Web 页也是通过 URL 地址引用页面中的其他对象，每个 URL 地址主要由<strong>两部分</strong>组成：存放对象的服务器主机域名和对象的路径名</p><ol start="2"><li> HTTP</li></ol><p><img src="/pic/jiwang/13.png"></p><ol start="3"><li> Cookie</li></ol><p>Cookie 是由服务器端生成，是实现服务器对客户状态的跟踪的典型技术</p><p><img src="/pic/jiwang/14.png" alt="Cookie的工作原理"></p><h2 id="五、Internet电子邮件"><a href="#五、Internet电子邮件" class="headerlink" title="五、Internet电子邮件"></a>五、Internet电子邮件</h2><p><img src="/pic/jiwang/15.png"></p><p><img src="/pic/jiwang/16.png"></p><h2 id="六、FTP"><a href="#六、FTP" class="headerlink" title="六、FTP"></a>六、FTP</h2><p>文件传送协议（FTP）是在互联网的两个主机间实现文件互传的应用层协议，C/S模式，采用<strong>控制连接</strong>（21端口）传输控制命令，<strong>数据连接</strong>（20端口）传输文件内容</p><p><img src="/pic/jiwang/17.png" alt="FTP应用结构"></p><h2 id="七、P2P应用"><a href="#七、P2P应用" class="headerlink" title="七、P2P应用"></a>七、P2P应用</h2><p>P2P应用的优势：充分聚集利用了端系统（对等方主机）的计算能力以及网络传输带宽，对服务器的依赖很小</p><p><img src="/pic/jiwang/18.png" alt="文件分发问题"></p><h2 id="八、Socket编程基础"><a href="#八、Socket编程基础" class="headerlink" title="八、Socket编程基础"></a>八、Socket编程基础</h2><p>利用 Socket 编程技术可以开发客户/服务器网络应用程序，网络应用进程通信时需要通过<strong>API接口</strong>请求底层协议的服务，可以创建3种类型的Socket：数据报类型套接字SOCK_DGRAM（面向UDP）、流式套接字 SOCK_STREAM（面向 TCP）和原始套接字 SOCK_RAM</p><p><img src="/pic/jiwang/19.png"></p><p><img src="/pic/jiwang/20.png" alt="基于TCP的Socket编程"></p><p><img src="/pic/jiwang/21.png" alt="基于UDP的Socket编程"></p><h5 id="重难点回顾"><a href="#重难点回顾" class="headerlink" title="重难点回顾"></a>重难点回顾</h5><ul><li>客户/服务器、P2P（Pear to Pear）两种网络应用体系结构及各自的特点</li><li>DNS的概念和工作原理</li><li>万维网应用结构和HTTP协议</li><li>电子邮件系统结构和协议</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理（一）</title>
    <link href="/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h1><h2 id="一、计算机网络基本概念"><a href="#一、计算机网络基本概念" class="headerlink" title="一、计算机网络基本概念"></a>一、计算机网络基本概念</h2><ol><li>计算机网络是互连的、自治的计算机的集合</li></ol><p>“互连”：指利用通信链路连接相互独立的计算机系统</p><p>“自治”：指互连的计算机系统彼此独立，不存在主从或者控制与被控制的关系</p><ol start="2"><li>协议是网络通信实体之间在数据交换过程中需要遵循的规则或约定，是计算机网络有序运行的重要保证</li></ol><p><strong>协议三要素：语义、语法、时序</strong></p><ul><li>语法，语法定义实体之间交换信息的格式与结构</li><li>语义，语义就是定义实体之间交换的信息中需要发送控制信息</li><li>时序，时序也称为同步，定义实体之间交换信息的顺序以及如何匹配或适应彼此的速度</li></ul><ol start="3"><li>计算机网络的分类</li></ol><p><strong>按覆盖范围分类：</strong></p><p>个域网（PAN）、局域网（LAN）、城域网（MAN）、广域网（WAN）</p><p><strong>按拓扑结构分类：</strong></p><p><img src="/pic/jiwang/1.png" alt="常见的网络拓扑结构"></p><p><strong>按交换方式分类</strong></p><p>电路交换网络、报文交换网络、分组交换网络</p><h2 id="二、计算机网络结构"><a href="#二、计算机网络结构" class="headerlink" title="二、计算机网络结构"></a>二、计算机网络结构</h2><p>大规模现代计算机网络的结构包括<strong>网络边缘、接入网络与网络核心</strong>3部分</p><h2 id="三、数据交换技术"><a href="#三、数据交换技术" class="headerlink" title="三、数据交换技术"></a>三、数据交换技术</h2><p><img src="/pic/jiwang/2.png" alt="交换设备与交换网络的意义"></p><ol><li>电路交换</li></ol><p>电路交换是最早出现的一种交换方式，电话网络则是最早、最大的电路交换网络</p><p>利用电路交换进行通信包括<strong>建立电路、传输数据和拆除电路</strong>3个阶段</p><p><img src="/pic/jiwang/3.png" alt="电路交换"></p><p>优点：<strong>实时性高</strong>，时延较小</p><p>缺点：对于突发性数据传输，<strong>信道利用率低</strong>，且传输速率单一</p><ol start="2"><li>报文交换</li></ol><p><strong>存储-转发</strong>交换方式，适用于电报通信</p><p><img src="/pic/jiwang/4.png" alt="分组交换"></p><p>优点：<strong>不需要建立连接</strong></p><p>缺点：交换结点需要缓冲存储，报文需要<strong>排队</strong>，增加了延时</p><ol start="3"><li>分组交换</li></ol><p>将一个完整报文拆分成若干个<strong>分组</strong>，分组传输过程也通常采用<strong>存储-转发</strong>交换方式</p><p><img src="/pic/jiwang/5.png" alt="分组交换"></p><p>优点：交换设备<strong>存储容量要求低</strong>，交换速度快，可靠传输效率高，更加公平 </p><p>缺点：有效传输效率降低(<strong>分组长度与延迟时间</strong>)</p><h2 id="四、计算机网络性能"><a href="#四、计算机网络性能" class="headerlink" title="四、计算机网络性能"></a>四、计算机网络性能</h2><ol><li> 速率与带宽</li></ol><p><strong>速率</strong>是指网络单位时间内传送的数据量，用以描述网络传输数据的快慢，也称为数据传输速率或数据速率，速率的基本单位是 bit/s（位每秒，简写为bps）带宽</p><p>在计算机网络中，有时也会用“<strong>带宽</strong>”这一术语描述速率</p><p>带宽原本是指信号具有的频带宽度，即信号成分的最高频率与最低频率之差，单位为 Hz（赫兹）</p><ol start="2"><li> 时延</li></ol><p><strong>时延</strong>是指数据从网络中的一个结点（主机或交换设备等）到达另一结点所需要的时间</p><ol start="3"><li> 时延带宽积</li></ol><p>一段物理链路的传播时延与链路带宽的乘积，称为<strong>时延带宽积</strong></p><ol start="4"><li> 丢包率</li></ol><p><strong>丢包率</strong>常被用于评价和衡量网络性能的指标，在很大程度上可以反映网络的拥塞程度</p><p>丢包率=丢失分组总数/发送分组总数</p><ol start="5"><li> 吞吐量</li></ol><p><strong>吞吐量</strong>表示在单位时间内源主机通过网络向目的主机实际送达的数据量，吞吐量经常用于度量网络的实际数据传送（通过）能力。</p><h2 id="五、计算机网络体系结构"><a href="#五、计算机网络体系结构" class="headerlink" title="五、计算机网络体系结构"></a>五、计算机网络体系结构</h2><ol><li> OSI（开放系统互联）参考模型</li></ol><p><img src="/pic/jiwang/6.png" alt="OSI参考模型数据封装与传输过程"></p><ol start="2"><li> TCP/IP参考模型、五层参考模型</li></ol><p><img src="/pic/jiwang/7.png" alt="各模型之间的比较"></p><ol start="3"><li> 各层次的功能</li></ol><p>   <img src="/pic/jiwang/8.png" alt="层次功能"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2021/10/23/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/10/23/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">#  一级标题<br><br>##  二级标题<br><br>###  三级标题<br><br>####  四级标题<br><br>#####  五级标题<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>记得#后面加空格，一级到五级，字体从大到小</li></ul><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**这是加粗的文字**</span><br><br><span class="hljs-strong">*这是倾斜的文字*</span><br><br><span class="hljs-strong">***这是斜体加粗的文字**</span>*<br><br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><em><strong>这是斜体加粗的文字</strong></em></p><p><del>这是加删除线的文字</del></p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h1><p>使用 <code>&gt;</code> 表示，可以有多个 <code>&gt;</code>，表示层级更深</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><blockquote><p>这是引用的内容</p></blockquote><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h1><p>三个或者三个以上的 - 或者 * 都可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">***</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5. 超链接"></a>5. 超链接</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[超链接名]</span>(超链接地址 <span class="hljs-string">&quot;超链接title&quot;</span>)<br><br><span class="hljs-selector-tag">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br></code></pre></td></tr></table></figure><p><a href="http://baidu.com/">百度</a></p><h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dos">![图片alt](图片地址 &quot;图片<span class="hljs-built_in">title</span>&quot;)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片<span class="hljs-built_in">title</span>是图片的标题，当鼠标移到图片上时显示的内容<br><span class="hljs-built_in">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>图片和链接的写法类似，图片仅在超链接前多了一个 <code>!</code> </p><p><code>![姜文](/img/favorite.jpeg)</code></p><p><img src="/img/favorite.jpeg" alt="姜文"></p><h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h1><ul><li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5></li></ul><p>无序列表用 - + * 任何一种都可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + <span class="hljs-emphasis">* 跟内容之间都要有一个空格</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5></li></ul><p>数字加点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 列表内容<br><span class="hljs-number">2.</span> 列表内容<br><span class="hljs-number">3.</span> 列表内容<br><br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><ul><li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5></li></ul><p>上一级和下一级之间敲三个空格</p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容<ol><li> 三级有序列表内容</li><li> 三级有序列表内容</li></ol></li></ul></li><li><h5 id="高级列表"><a href="#高级列表" class="headerlink" title="高级列表"></a>高级列表</h5><p>有可勾选框的清单</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>[x] 1.早睡早起<br><span class="hljs-bullet">- </span>[ ] 2.打代码<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 1.早睡早起</li><li><input disabled="" type="checkbox"> 2.打代码</li></ul></li></ul><h1 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">表头|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span><br><span class="hljs-string">---</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">---:</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">第二行分割表头和内容。</span><br><span class="hljs-string">- 有一个就行，为了对齐，多加了几个</span><br><span class="hljs-string">文字默认居左</span><br><span class="hljs-string">-两边加：表示文字居中</span><br><span class="hljs-string">-右边加：表示文字居右</span><br><span class="hljs-string">注：原生的语法两边都要用 </span>|<span class="hljs-string"> 包起来。此处省略</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">姓名|<span class="hljs-string">技能</span>|<span class="hljs-string">排行</span><br><span class="hljs-string">--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:</span><br><span class="hljs-string">刘备</span>|<span class="hljs-string">哭</span>|<span class="hljs-string">大哥</span><br><span class="hljs-string">关羽</span>|<span class="hljs-string">打</span>|<span class="hljs-string">二哥</span><br><span class="hljs-string">张飞</span>|<span class="hljs-string">骂</span>|<span class="hljs-string">三弟</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="9-代码"><a href="#9-代码" class="headerlink" title="9. 代码"></a>9. 代码</h1><ul><li><h5 id="用反引号-来插入行内代码"><a href="#用反引号-来插入行内代码" class="headerlink" title="用反引号 ` 来插入行内代码"></a>用反引号 ` 来插入行内代码</h5><p><code>String name = &quot;Tstto&quot;</code></p></li><li><h5 id="三个连续的反引号-包裹多行代码"><a href="#三个连续的反引号-包裹多行代码" class="headerlink" title="三个连续的反引号 ``` 包裹多行代码"></a>三个连续的反引号 ``` 包裹多行代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  alert(<span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/2021/10/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ul><li><p>查看node版本</p><p>node -v</p></li><li><p>查看npm版本</p><p>npm -v</p></li></ul><h2 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h2><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><ul><li><p>查看cnpm版本</p><p>cnpm -v</p></li></ul><h2 id="安装hexo脚手架"><a href="#安装hexo脚手架" class="headerlink" title="安装hexo脚手架"></a>安装hexo脚手架</h2><p>cnpm install -g hexo-cli</p><ul><li><p>查看hexo版本</p><p>hexo -v</p></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://npm.taobao.org/mirrors">淘宝Git镜像下载</a></p><ul><li>Windows用户右击打开Git Bash Here进入命令行窗口</li></ul><ul><li><p>创建blog目录(任意盘选择)</p><p>mkdir  blog   //方便后续出现问题及时处理</p></li><li><p>进入blog目录，初始化博客</p><p>cd blog</p><p>hexo init</p></li><li><p>启动本地hexo服务</p><p>hexo s(serve)   //本地默认访问地址<a href="http://localhost:4000/">http://localhost:4000</a></p></li><li><p>创建博客文章</p><p>hexo n(new) xxx(文章title)   //保存目录…\blog\source_posts</p></li><li><p>清理更新</p><p>hexo c(clean)</p></li><li><p>生成</p><p>hexo g(generate) </p></li></ul><h1 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h1><p>(内心os：原先想在码云Gitee搭建仓库的，无奈Gitee Pages需实名认证过程繁琐，Github又有墙，博客有时加载速度真的是要了狗命…)</p><ul><li><p>注册创建账号，搭建仓库</p><p>GithubName.github.io(墙裂建议！！！一定要照抄不误的用你的用户名，否则后面可能出现一系列问题)</p></li><li><p>blog目录下安装git部署插件</p><p>cnpm install –save hexo-deployer-git</p></li></ul><h1 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h1><p>灰常重要哦！！！误删误大改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span><br>deploy:<br>  type: git<br> repo: https:<span class="hljs-comment">//github.com/YourGithubName/YourGithubName.github.io.git</span><br>  branch: master<br>(文件底部可见)<br></code></pre></td></tr></table></figure><ul><li><p>部署到Github仓库</p><p>hexo d(deploy)</p></li><li><p>访问hexo初始化博客</p><p><a href="https://githubname.github.io/">https://GithubName.github.io/</a>   //访问这个地址可以查看博客</p></li></ul><h1 id="下载你喜欢的hexo主题"><a href="#下载你喜欢的hexo主题" class="headerlink" title="下载你喜欢的hexo主题"></a>下载你喜欢的hexo主题</h1><p>git clone <a href="https://github.com/fluid-dev/hexo-theme-fluid.git">https://github.com/fluid-dev/hexo-theme-fluid.git</a>   //我自己用的是Fluid主题，更多热门主题可访问<a href="https://hexo.io/themes/">hexo官网</a>查看对应Readme.md文档</p><ul><li>修改hexo根目录下的 _config.yml 文件 </li></ul><p><code>theme: fluid</code></p><p>hexo c<br>hexo g<br>hexo d   //部署到远程Github仓库<br><a href="https://githubname.github.io/">https://GithubName.github.io/</a>   //查看博客</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><ul><li>配置指定语言</li></ul><p>_config.yml文件下修改主题指定语言</p><p><code>language: zh-CN</code></p><ul><li>手动创建[分类页]、[标签页]…</li></ul><p>hexo n page 创建页名称</p><ul><li>另外</li></ul><p>完成以上就能够构建一个基本结构，足够美观大气的博客。很多地方还都是官方的默认配置，比如背景图，交互…很难满足每个人的口味，未来很长，除了这一小部分的修修改改，学习的路上还有很多等你攻克的事，加油！(个性化设置基本都在_config.yml中，blog目录和主题Fluid目录下都有 当然如果你有能力自定义的话，也可以打造专属你自己的页面)</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
